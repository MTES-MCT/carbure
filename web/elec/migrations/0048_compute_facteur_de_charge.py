# Generated by Django 5.0.6 on 2025-01-15 17:48

from collections import defaultdict

from django.db import migrations
from django.db.models import Q


def calculate_energy_used_in_meter_readings(apps, schema_editor):
    """
    Use existing data to compute the value for the field "energy_used_since_last_reading" in meter readings.
    This value contains the delta between the index of the last reading we have for a charge point,
    with the new one that is being added
    """

    ElecMeterReading = apps.get_model("elec", "ElecMeterReading")

    all_readings = (
        ElecMeterReading.objects.all()
        .select_related("meter", "meter__charge_point")
        .order_by("reading_date")
        .exclude(
            Q(meter=None)
            | Q(meter__charge_point=None)
            | Q(meter__charge_point__nominal_power=0)
            | Q(meter__initial_index=None)
            | Q(meter__initial_index_date=None)
        )
    )

    readings_by_meter = defaultdict(list)
    for reading in all_readings:
        if reading.meter:
            readings_by_meter[reading.meter.pk].append(reading)

    readings_to_update = []

    for readings in readings_by_meter.values():
        meter = readings[0].meter
        charge_point = meter.charge_point
        for i, reading in enumerate(readings):
            previous_reading = readings[i - 1] if i > 0 else None
            last_reading_index = previous_reading.extracted_energy if previous_reading else meter.initial_index
            last_reading_date = previous_reading.reading_date if previous_reading else meter.initial_index_date

            try:
                reading.energy_used_since_last_reading = reading.extracted_energy - last_reading_index
                reading.days_since_last_reading = (reading.reading_date - last_reading_date).days

                if charge_point.nominal_power and reading.days_since_last_reading:
                    reading.facteur_de_charge = reading.energy_used_since_last_reading / (
                        charge_point.nominal_power * reading.days_since_last_reading * 24
                    )
            except Exception as e:
                print(f"> Error: {e}")

            readings_to_update.append(reading)

    ElecMeterReading.objects.bulk_update(
        readings_to_update, ["energy_used_since_last_reading", "days_since_last_reading", "facteur_de_charge"]
    )


class Migration(migrations.Migration):
    dependencies = [
        ("elec", "0047_elecmeterreading_days_since_last_reading_and_more"),
    ]

    operations = [
        migrations.RunPython(calculate_energy_used_in_meter_readings),
    ]
