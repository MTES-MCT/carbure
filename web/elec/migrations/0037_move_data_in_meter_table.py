# Generated by Django 5.0.6 on 2024-08-06 14:49

from django.db import migrations


def new_meter_table_migration(apps, schema_editor):
    charge_point = apps.get_model("elec", "ElecChargePoint")
    meter = apps.get_model("elec", "ElecMeter")
    meter_reading = apps.get_model("elec", "ElecMeterReading")

    charge_points = charge_point.objects.all()

    # Create a new meter for each charge point with a mid_id
    for cp in charge_points:
        if cp.mid_id:
            measure_energy = cp.measure_energy if cp.measure_energy else 0

            new_meter = meter.objects.create(
                mid_certificate=cp.mid_id,
                initial_index=measure_energy,
                initial_index_date=cp.measure_date,
                charge_point=cp,
            )

            # Associate the new meter to the charge point
            cp.current_meter = new_meter
            cp.save()

            # Get all meter readings for this charge point and update the meter
            readings = meter_reading.objects.filter(charge_point=cp)
            readings.update(meter=new_meter)


def reverse_migration(apps, schema_editor):
    charge_point = apps.get_model("elec", "ElecChargePoint")
    meter = apps.get_model("elec", "ElecMeter")
    meter_reading = apps.get_model("elec", "ElecMeterReading")

    charge_point.objects.update(current_meter=None)
    meter_reading.objects.update(meter=None)
    meter.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("elec", "0036_elecmeter_elecchargepoint_current_meter_and_more"),
    ]

    operations = [
        migrations.RunPython(new_meter_table_migration, reverse_code=reverse_migration),
    ]
