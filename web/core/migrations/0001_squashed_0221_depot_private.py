# Generated by Django 4.1 on 2022-08-30 09:22

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# core.migrations.0120_auto_20210317_1725
# core.migrations.0144_auto_20210514_1643
# core.migrations.0157_auto_20210531_1151
# core.migrations.0158_entity_hash
# core.migrations.0164_lotv2_year
# core.migrations.0167_auto_20210622_1708
# core.migrations.0174_auto_20210702_1622
# core.migrations.0176_auto_20210726_1338
# core.migrations.0179_auto_20210810_1407
# core.migrations.0181_auto_20210810_1644
# core.migrations.0184_auto_20210827_1026
# core.migrations.0191_auto_20211214_1910
# core.migrations.0192_auto_20211230_1225

class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_auto_20200124_1010'), ('core', '0003_auto_20200124_1226'), ('core', '0004_auto_20200127_1140'), ('core', '0005_auto_20200204_1017'), ('core', '0006_filiereproduction_lot_pays_typebiocarburant'), ('core', '0007_userpreferences'), ('core', '0008_auto_20200223_1339'), ('core', '0009_lot_producer'), ('core', '0010_lot_attestation'), ('core', '0011_auto_20200224_1508'), ('core', '0012_auto_20200226_1541'), ('core', '0013_auto_20200303_1212'), ('core', '0014_auto_20200303_1216'), ('core', '0015_auto_20200312_0959'), ('core', '0016_lot_volume2'), ('core', '0017_lot_matiere_premiere2'), ('core', '0018_auto_20200312_1017'), ('core', '0019_auto_20200312_1020'), ('core', '0020_auto_20200319_1330'), ('core', '0021_auto_20200319_1342'), ('core', '0022_auto_20200320_1356'), ('core', '0023_auto_20200323_1604'), ('core', '0024_lot_ghg_total'), ('core', '0025_auto_20200326_1258'), ('core', '0026_remove_lot_e'), ('core', '0027_ghgvalues'), ('core', '0028_auto_20200327_1525'), ('core', '0029_auto_20200330_1339'), ('core', '0030_lot_ea_delivery_accepted'), ('core', '0031_auto_20200407_0719'), ('core', '0032_auto_20200420_1038'), ('core', '0033_lotcomment'), ('core', '0034_lotcomment_entity'), ('core', '0035_auto_20200424_1109'), ('core', '0036_auto_20200427_0932'), ('core', '0037_auto_20200427_1200'), ('core', '0038_auto_20200507_1209'), ('core', '0039_auto_20200514_1038'), ('core', '0040_depot'), ('core', '0041_lot_ea_delivery_site_fk'), ('core', '0042_auto_20200604_1329'), ('core', '0043_auto_20200604_1611'), ('core', '0044_lotv2error'), ('core', '0045_auto_20200604_1713'), ('core', '0046_auto_20200604_1724'), ('core', '0041_auto_20200605_1759'), ('core', '0042_auto_20200605_1800'), ('core', '0047_merge_20200605_1811'), ('core', '0048_lotv2_added_by'), ('core', '0049_auto_20200611_1631'), ('core', '0050_auto_20200611_1639'), ('core', '0051_depot_country'), ('core', '0052_lotv2_added_by_user'), ('core', '0053_lotv2_added_time'), ('core', '0054_auto_20200615_1717'), ('core', '0055_auto_20200616_1020'), ('core', '0056_auto_20200616_1357'), ('core', '0057_auto_20200616_1558'), ('core', '0058_transactioncomment'), ('core', '0059_transactioncomment_topic'), ('core', '0060_auto_20200708_1228'), ('core', '0061_lotv2_data_origin_entity'), ('core', '0062_pays_is_in_europe'), ('core', '0063_pays_name_en'), ('core', '0064_auto_20200805_1601'), ('core', '0065_checkrule'), ('core', '0066_auto_20200902_1037'), ('core', '0067_auto_20200902_1038'), ('core', '0068_lottransaction_is_mac'), ('core', '0069_depot_depot_type'), ('core', '0070_auto_20200907_1311'), ('core', '0071_lotvalidationerror'), ('core', '0072_auto_20200916_1319'), ('core', '0072_auto_20200915_1355'), ('core', '0073_merge_20200916_1409'), ('core', '0074_auto_20200916_1413'), ('core', '0075_lotvalidationerror_details'), ('core', '0076_matierepremiere_is_double_compte'), ('core', '0077_lotv2_is_valid'), ('core', '0078_auto_20200924_0947'), ('core', '0079_iscccertificate_iscccertificaterawmaterial_iscccertificatescope_isccscope'), ('core', '0080_auto_20201007_1332'), ('core', '0081_dbscertificate'), ('core', '0082_entitydbstradingcertificate_entityiscctradingcertificate'), ('core', '0083_auto_20201028_1900'), ('core', '0084_lottransaction_is_batch'), ('core', '0085_auto_20201109_1444'), ('core', '0086_dbscertificatescope'), ('core', '0087_auto_20201109_1648'), ('core', '0088_matierepremiere_is_huile_vegetale'), ('core', '0089_productionsitecertificate'), ('core', '0089_auto_20201118_1234'), ('core', '0090_merge_20201118_1735'), ('core', '0091_entity_national_system_certificate'), ('core', '0092_auto_20201120_0921'), ('core', '0093_auto_20201125_1239'), ('core', '0094_auto_20201201_1037'), ('core', '0095_auto_20201202_1519'), ('core', '0096_auto_20201202_1536'), ('core', '0097_userrightsrequests'), ('core', '0098_auto_20210118_1404'), ('core', '0099_sustainabilitydeclaration'), ('core', '0100_auto_20210120_1326'), ('core', '0101_auto_20210125_1714'), ('core', '0102_sustainabilitydeclaration_declared'), ('core', '0103_controlmessages'), ('core', '0104_matierepremiere_category'), ('core', '0105_auto_20210210_1540'), ('core', '0106_auto_20210212_1645'), ('core', '0107_auto_20210217_1523'), ('core', '0108_sustainabilitydeclaration_reminder_count'), ('core', '0109_auto_20210218_1930'), ('core', '0110_auto_20210219_1416'), ('core', '0111_auto_20210226_0947'), ('core', '0112_lotvalidationerror_tx'), ('core', '0113_lotvalidationerror_warning_to_recipient'), ('core', '0114_auto_20210226_1426'), ('core', '0115_lottransaction_vendor_certificate'), ('core', '0116_lotv2_is_transformed'), ('core', '0117_auto_20210303_1715'), ('core', '0118_etbetransformation'), ('core', '0119_auto_20210317_1725'), ('core', '0120_auto_20210317_1725'), ('core', '0121_auto_20210317_1749'), ('core', '0122_auto_20210317_1815'), ('core', '0123_auto_20210319_1542'), ('core', '0124_auto_20210319_1606'), ('core', '0125_redcertcertificatebiomass'), ('core', '0126_auto_20210323_1644'), ('core', '0127_auto_20210324_1428'), ('core', '0128_auto_20210419_1049'), ('core', '0129_remove_entity_national_system_certificate'), ('core', '0130_lottransaction_generated_by_carbure'), ('core', '0131_lotv2_remaining_volume'), ('core', '0132_auto_20210428_1439'), ('core', '0133_auto_20210428_1450'), ('core', '0134_auto_20210429_1854'), ('core', '0135_auto_20210429_1900'), ('core', '0136_lottransaction_parent_tx'), ('core', '0137_auto_20210430_1509'), ('core', '0138_alter_matierepremiere_category'), ('core', '0139_lottransaction_is_stock'), ('core', '0140_genericerror'), ('core', '0141_auto_20210510_1044'), ('core', '0142_auto_20210510_1046'), ('core', '0143_alter_entity_sustainability_officer'), ('core', '0144_auto_20210514_1643'), ('core', '0145_auto_20210514_1658'), ('core', '0146_genericerror_fields'), ('core', '0147_transactionupdatehistory'), ('core', '0148_transactionupdatehistory_modified_by'), ('core', '0149_auto_20210520_1437'), ('core', '0150_alter_lotv2_status'), ('core', '0151_transactionupdatehistory_modified_by_entity'), ('core', '0152_auto_20210526_1122'), ('core', '0153_genericerror_fields'), ('core', '0154_auto_20210527_1708'), ('core', '0155_auto_20210528_1128'), ('core', '0156_alter_lottransaction_champ_libre'), ('core', '0157_auto_20210531_1151'), ('core', '0158_entity_hash'), ('core', '0159_auto_20210601_1045'), ('core', '0160_auto_20210602_1652'), ('core', '0161_auto_20210602_1703'), ('core', '0162_emailnotification'), ('core', '0163_auto_20210609_1514'), ('core', '0164_lotv2_year'), ('core', '0165_alter_lottransaction_delivery_status'), ('core', '0166_auto_20210622_1428'), ('core', '0167_auto_20210622_1708'), ('core', '0168_auto_20210623_1556'), ('core', '0169_emailnotification_linked_declaration'), ('core', '0170_depot_gps_coordinates'), ('core', '0171_transactiondistance'), ('core', '0172_entity_notifications_enabled'), ('core', '0173_lottransaction_transaction_type'), ('core', '0174_auto_20210702_1622'), ('core', '0175_lotv2_lots_v2_year_87d135_idx'), ('core', '0176_auto_20210726_1338'), ('core', '0177_admintransactioncomment'), ('core', '0178_admintransactioncomment_datetime'), ('core', '0179_auto_20210810_1407'), ('core', '0180_alter_emailnotification_notif_type'), ('core', '0181_auto_20210810_1644'), ('core', '0182_auto_20210811_1603'), ('core', '0183_auto_20210827_1024'), ('core', '0184_auto_20210827_1026'), ('core', '0185_auto_20210922_1452'), ('core', '0186_auto_20210927_1744'), ('core', '0187_lottransaction_potential_duplicate'), ('core', '0188_admintransactioncomment_entity'), ('core', '0189_auto_20211022_1534'), ('core', '0190_auto_20211129_1043'), ('core', '0191_auto_20211214_1910'), ('core', '0192_auto_20211230_1225'), ('core', '0193_auto_20220103_1542'), ('core', '0194_auto_20220121_1530'), ('core', '0195_alter_carburelot_delivery_type'), ('core', '0196_alter_carburelot_delivery_type'), ('core', '0197_carburelot_created_at'), ('core', '0198_remove_control_tx_remove_controlfiles_control_and_more'), ('core', '0199_auto_20220315_1134'), ('core', '0200_delete_lot_remove_lotv2_added_by_and_more'), ('core', '0201_delete_carburenotification'), ('core', '0202_carburenotification_and_more'), ('core', '0203_alter_carburenotification_type'), ('core', '0204_carburenotification_notify_administrator'), ('core', '0205_alter_carburenotification_datetime'), ('core', '0206_alter_carburenotification_type'), ('core', '0207_entitycertificate_checked_by_admin'), ('core', '0208_entitycertificate_added_dt'), ('core', '0209_entitycertificate_rejected_by_admin'), ('core', '0210_carburelot_audit_status_and_more'), ('core', '0211_carburelot_data_reliability_score_and_more'), ('core', '0212_alter_carburelotreliabilityscore_item'), ('core', '0213_alter_carburelotreliabilityscore_comment'), ('core', '0214_alter_carburelotreliabilityscore_max_score_and_more'), ('core', '0215_remove_carburelotreliabilityscore_comment_and_more'), ('core', '0216_entity_preferred_unit'), ('core', '0216_carburelot_ml_scoring'), ('core', '0217_merge_20220614_1604'), ('core', '0218_alter_biocarburant_options_alter_depot_options_and_more'), ('core', '0219_carburelot_carbure_lot_year_26abfd_idx_and_more'), ('core', '0220_carburelot_carbure_lot_period_03dfac_idx_and_more'), ('core', '0221_depot_private')]

    initial = True

    dependencies = [
        ('producers', '0024_productionsite_address'),
        ('producers', '0015_delete_attestationproducer'),
        ('producers', '0010_auto_20200304_1639'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('certificates', '0013_productionsitecertificate_certificate'),
        ('certificates', '0001_initial'),
        ('producers', '0001_initial'),
        ('certificates', '0007_auto_20210428_1439'),
        ('producers', '0020_auto_20201118_1222'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('entity_type', models.CharField(choices=[('Producteur', 'Producteur'), ('Opérateur', 'Opérateur'), ('Administration', 'Administration'), ('Trader', 'Trader'), ('Unknown', 'Unknown')], default='Unknown', max_length=64)),
                ('parent_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('producer_with_mac', models.BooleanField(default=False)),
                ('producer_with_trading', models.BooleanField(default=False)),
                ('trading_certificate', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'db_table': 'entities',
            },
        ),
        migrations.CreateModel(
            name='UserRights',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Right',
                'verbose_name_plural': 'Users Rights',
                'db_table': 'users_rights',
            },
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_pays', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
                ('is_in_europe', models.BooleanField(default=False)),
                ('name_en', models.CharField(default='', max_length=128)),
            ],
            options={
                'verbose_name': 'Pays',
                'verbose_name_plural': 'Pays',
                'db_table': 'pays',
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'users_preferences',
            },
        ),
        migrations.CreateModel(
            name='MatierePremiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Matiere Premiere',
                'verbose_name_plural': 'Matieres Premieres',
                'db_table': 'filieres_production',
            },
        ),
        migrations.AlterModelTable(
            name='matierepremiere',
            table='matieres_premieres',
        ),
        migrations.AlterField(
            model_name='matierepremiere',
            name='name',
            field=models.CharField(max_length=128),
        ),
        migrations.CreateModel(
            name='Biocarburant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Biocarburant',
                'verbose_name_plural': 'Biocarburants',
                'db_table': 'type_biocarburants',
            },
        ),
        migrations.AlterModelTable(
            name='biocarburant',
            table='biocarburants',
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='code',
            field=models.CharField(default='', max_length=16, unique=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='code',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.CreateModel(
            name='GHGValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(blank=True, max_length=256, null=True)),
                ('biocarburant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.biocarburant')),
                ('matiere_premiere', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.matierepremiere')),
                ('eec_default', models.FloatField(default=0.0)),
                ('eec_typical', models.FloatField(default=0.0)),
                ('ep_default', models.FloatField(default=0.0)),
                ('ep_typical', models.FloatField(default=0.0)),
                ('etd_default', models.FloatField(default=0.0)),
                ('etd_typical', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Valeur GES de référence',
                'verbose_name_plural': 'Valeurs GES de référence',
                'db_table': 'ghg_values',
            },
        ),
        migrations.CreateModel(
            name='Depot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('city', models.CharField(blank=True, max_length=128, null=True)),
                ('depot_id', models.CharField(max_length=32)),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pays')),
                ('depot_type', models.CharField(choices=[('EFS', 'EFS'), ('EFPE', 'EFPE'), ('OTHER', 'Autre')], default='OTHER', max_length=32)),
            ],
            options={
                'verbose_name': 'Dépôt',
                'verbose_name_plural': 'Dépôts',
                'db_table': 'depots',
            },
        ),
        migrations.CreateModel(
            name='LotV2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(blank=True, default='', max_length=64)),
                ('carbure_id', models.CharField(blank=True, default='', max_length=64)),
                ('producer_is_in_carbure', models.BooleanField(default=True)),
                ('unknown_producer', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('production_site_is_in_carbure', models.BooleanField(default=True)),
                ('unknown_production_site', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('volume', models.IntegerField(default=0)),
                ('eec', models.FloatField(default=0.0)),
                ('el', models.FloatField(default=0.0)),
                ('ep', models.FloatField(default=0.0)),
                ('etd', models.FloatField(default=0.0)),
                ('eu', models.FloatField(default=0.0)),
                ('esca', models.FloatField(default=0.0)),
                ('eccs', models.FloatField(default=0.0)),
                ('eccr', models.FloatField(default=0.0)),
                ('eee', models.FloatField(default=0.0)),
                ('ghg_total', models.FloatField(default=0.0)),
                ('ghg_reference', models.FloatField(default=0.0)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('Draft', 'Brouillon'), ('Validated', 'Validé')], default='Draft', max_length=64)),
                ('source', models.CharField(choices=[('EXCEL', 'Excel'), ('MANUAL', 'Manual')], default='Manual', max_length=32)),
                ('is_split', models.BooleanField(default=False)),
                ('biocarburant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.biocarburant')),
                ('carbure_producer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='producer_lotv2', to='core.entity')),
                ('carbure_production_site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='producers.productionsite')),
                ('matiere_premiere', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.matierepremiere')),
                ('parent_lot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lotv2')),
                ('pays_origine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pays')),
                ('unknown_production_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unknown_production_site_country', to='core.pays')),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('added_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('added_time', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('unknown_production_site_com_date', models.DateField(blank=True, null=True)),
                ('unknown_production_site_dbl_counting', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('unknown_production_site_reference', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('fused_with', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lotv2_fused_with', to='core.lotv2')),
                ('is_fused', models.BooleanField(default=False)),
                ('data_origin_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_origin_entity', to='core.entity')),
                ('blocking_sanity_checked_passed', models.BooleanField(default=False)),
                ('nonblocking_sanity_checked_passed', models.BooleanField(default=False)),
                ('is_valid', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'LotV2',
                'verbose_name_plural': 'LotsV2',
                'db_table': 'lots_v2',
            },
        ),
        migrations.CreateModel(
            name='LotTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_is_in_carbure', models.BooleanField(default=True)),
                ('unknown_vendor', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('dae', models.CharField(blank=True, default='', max_length=128)),
                ('client_is_in_carbure', models.BooleanField(default=True)),
                ('unknown_client', models.CharField(blank=True, default='', max_length=64)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('delivery_site_is_in_carbure', models.BooleanField(default=True)),
                ('unknown_delivery_site', models.CharField(blank=True, default='', max_length=64)),
                ('delivery_status', models.CharField(choices=[('N', 'En Attente'), ('A', 'Accepté'), ('R', 'Refusé'), ('AC', 'À corriger'), ('AA', 'Corrigé')], default='N', max_length=64)),
                ('etd_impact', models.FloatField(default=0.0)),
                ('ghg_total', models.FloatField(default=0.0)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('champ_libre', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('carbure_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client_transaction', to='core.entity')),
                ('carbure_delivery_site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.depot')),
                ('carbure_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_transaction', to='core.entity')),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lotv2')),
                ('unknown_delivery_site_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unknown_delivery_site_country', to='core.pays')),
                ('is_mac', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
            },
        ),
        migrations.CreateModel(
            name='TransactionError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=32)),
                ('value', models.CharField(blank=True, max_length=128, null=True)),
                ('error', models.CharField(max_length=256)),
                ('tx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
            ],
            options={
                'verbose_name': 'TransactionError',
                'verbose_name_plural': 'TransactionsErrors',
                'db_table': 'tx_errors',
            },
        ),
        migrations.CreateModel(
            name='LotV2Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=32)),
                ('value', models.CharField(blank=True, max_length=128, null=True)),
                ('error', models.CharField(max_length=256)),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lotv2')),
            ],
            options={
                'verbose_name': 'LotV2Error',
                'verbose_name_plural': 'LotV2Errors',
                'db_table': 'lotsv2_errors',
            },
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='masse_volumique',
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='pci_kg',
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='pci_litre',
            field=models.FloatField(default=0),
        ),
        migrations.CreateModel(
            name='TransactionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('tx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
                ('topic', models.CharField(choices=[('SUSTAINABILITY', 'Durabilité'), ('TX', 'Transaction'), ('BOTH', 'Les deux')], default='BOTH', max_length=24)),
            ],
            options={
                'verbose_name': 'TransactionComment',
                'verbose_name_plural': 'TransactionComments',
                'db_table': 'tx_comments',
            },
        ),
        migrations.CreateModel(
            name='CheckRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition_col', models.CharField(blank=True, max_length=32, null=True)),
                ('condition', models.CharField(choices=[('EQ', 'Equals'), ('GT', 'Greater Than'), ('GTE', 'Greater Than or Equal'), ('LT', 'Less Than'), ('LTE', 'Less Than or Equal'), ('DIFF', 'Is Different than'), ('IN', 'Is In'), ('NIN', 'Is Not In')], default='EQ', max_length=64)),
                ('condition_value', models.CharField(blank=True, max_length=256, null=True)),
                ('check_col', models.CharField(blank=True, max_length=32, null=True)),
                ('check', models.CharField(choices=[('EQ', 'Equals'), ('GT', 'Greater Than'), ('GTE', 'Greater Than or Equal'), ('LT', 'Less Than'), ('LTE', 'Less Than or Equal'), ('DIFF', 'Is Different than'), ('IN', 'Is In'), ('NIN', 'Is Not In')], default='EQ', max_length=64)),
                ('check_value', models.CharField(blank=True, max_length=256, null=True)),
                ('warning_to_user', models.BooleanField(default=False)),
                ('warning_to_admin', models.BooleanField(default=False)),
                ('block_validation', models.BooleanField(default=False)),
                ('message', models.CharField(blank=True, default='', max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'Règle Métier',
                'verbose_name_plural': 'Règles Métier',
                'db_table': 'check_rules',
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carbure_id', models.CharField(blank=True, default='', max_length=64)),
            ],
            options={
                'db_table': 'lots',
            },
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='is_alcool',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='is_graisse',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='compatible_alcool',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='compatible_graisse',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='LotValidationError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lotv2')),
                ('block_validation', models.BooleanField(default=False)),
                ('message', models.TextField(blank=True, default='', null=True)),
                ('rule_triggered', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('warning_to_admin', models.BooleanField(default=False)),
                ('warning_to_user', models.BooleanField(default=False)),
                ('details', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'LotValidationError',
                'verbose_name_plural': 'LotValidationErrors',
                'db_table': 'validation_errors',
            },
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='is_double_compte',
            field=models.BooleanField(default=False),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['carbure_vendor'], name='transaction_carbure_223649_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['carbure_client'], name='transaction_carbure_81c6e1_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['status'], name='lots_v2_status_a68baa_idx'),
        ),
        migrations.CreateModel(
            name='ISCCCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.CharField(max_length=64)),
                ('certificate_holder', models.CharField(max_length=256)),
                ('addons', models.CharField(max_length=256)),
                ('valid_from', models.DateField()),
                ('valid_until', models.DateField()),
                ('issuing_cb', models.CharField(default='', max_length=256)),
                ('location', models.CharField(default='', max_length=256)),
                ('download_link', models.CharField(default='', max_length=512)),
            ],
            options={
                'verbose_name': 'ISCC Certificate',
                'verbose_name_plural': 'ISCC Certificates',
                'db_table': 'iscc_certificates',
            },
        ),
        migrations.CreateModel(
            name='ISCCScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', models.CharField(max_length=8)),
                ('description', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'ISCC Scope',
                'verbose_name_plural': 'ISCC Scopes',
                'db_table': 'iscc_scopes',
            },
        ),
        migrations.CreateModel(
            name='ISCCCertificateScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.iscccertificate')),
                ('scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.isccscope')),
            ],
            options={
                'verbose_name': 'ISCC Certificate Scope',
                'verbose_name_plural': 'ISCC Certificate Scopes',
                'db_table': 'iscc_certificates_scopes',
            },
        ),
        migrations.CreateModel(
            name='ISCCCertificateRawMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_material', models.CharField(max_length=128)),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.iscccertificate')),
            ],
            options={
                'verbose_name': 'ISCC Certificate Raw Material',
                'verbose_name_plural': 'ISCC Certificate Raw Materials',
                'db_table': 'iscc_certificates_raw_materials',
            },
        ),
        migrations.CreateModel(
            name='DBSCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.CharField(max_length=64)),
                ('certificate_holder', models.CharField(max_length=256)),
                ('holder_address', models.CharField(max_length=512)),
                ('valid_from', models.DateField()),
                ('valid_until', models.DateField()),
                ('certification_type', models.CharField(default='', max_length=512)),
                ('download_link', models.CharField(default='', max_length=512)),
            ],
            options={
                'verbose_name': '2BS Certificate',
                'verbose_name_plural': '2BS Certificates',
                'db_table': 'dbs_certificates',
            },
        ),
        migrations.CreateModel(
            name='EntityISCCTradingCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.iscccertificate')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('has_been_updated', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Certificat de Trading ISCC',
                'verbose_name_plural': 'Certificats de Trading ISCC',
                'db_table': 'entity_iscc_trading_certificates',
            },
        ),
        migrations.CreateModel(
            name='EntityDBSTradingCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dbscertificate')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('has_been_updated', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Certificat de Trading 2BS',
                'verbose_name_plural': 'Certificats de Trading 2BS',
                'db_table': 'entity_2bs_trading_certificates',
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='has_mac',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='entity',
            name='has_trading',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='is_batch',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='DBSScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certification_type', models.CharField(default='', max_length=512)),
            ],
            options={
                'verbose_name': '2BS Scope',
                'verbose_name_plural': '2BS Scopes',
                'db_table': 'dbs_scopes',
            },
        ),
        migrations.CreateModel(
            name='DBSCertificateScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dbscertificate')),
                ('scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dbsscope')),
            ],
            options={
                'verbose_name': '2BS Certificate Scope',
                'verbose_name_plural': '2BS Certificate Scopes',
                'db_table': 'dbs_certificates_scopes',
            },
        ),
        migrations.AlterField(
            model_name='lotv2error',
            name='field',
            field=models.CharField(max_length=64),
        ),
        migrations.AlterField(
            model_name='transactionerror',
            name='field',
            field=models.CharField(max_length=64),
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='is_huile_vegetale',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ProductionSiteCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ISCC', 'ISCC'), ('2BS', '2BS')], default='Pending', max_length=32)),
                ('certificate_2bs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entitydbstradingcertificate')),
                ('certificate_iscc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entityiscctradingcertificate')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('production_site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='producers.productionsite')),
            ],
            options={
                'verbose_name': 'Certificat de site de production',
                'verbose_name_plural': 'Certificats de sites de productions',
                'db_table': 'production_sites_certificates',
            },
        ),
        migrations.AddField(
            model_name='depot',
            name='address',
            field=models.CharField(default='', max_length=128),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='depot',
            name='postal_code',
            field=models.CharField(default='', max_length=32),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='entity',
            name='national_system_certificate',
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='is_displayed',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='is_displayed',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tx_lot', to='core.lotv2'),
        ),
        migrations.CreateModel(
            name='EntityDepot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ownership_type', models.CharField(choices=[('OWN', 'Propre'), ('THIRD_PARTY', 'Tiers')], default='THIRD_PARTY', max_length=32)),
                ('depot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.depot')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': 'Dépôt Entité',
                'verbose_name_plural': 'Dépôts Entité',
                'db_table': 'entity_depot',
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('OPEN', 'Ouvert'), ('CLOSED', 'Clôturé')], default='OPEN', max_length=32)),
                ('opened_at', models.DateTimeField(auto_now_add=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('tx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
            ],
            options={
                'verbose_name': 'Contrôle Lot',
                'verbose_name_plural': 'Contrôles Lots',
                'db_table': 'controls',
            },
        ),
        migrations.CreateModel(
            name='UserRightsRequests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_requested', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente de validation'), ('ACCEPTED', 'Accepté'), ('REJECTED', 'Refusé'), ('REVOKED', 'Révoqué')], default='PENDING', max_length=32)),
                ('comment', models.TextField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Right Request',
                'verbose_name_plural': 'Users Rights Requests',
                'db_table': 'users_rights_requests',
            },
        ),
        migrations.CreateModel(
            name='ControlFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='')),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.control')),
            ],
            options={
                'verbose_name': 'Contrôle - Justificatif',
                'verbose_name_plural': 'Contrôles - Justificatifs',
                'db_table': 'control_files',
            },
        ),
        migrations.CreateModel(
            name='SustainabilityDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('checked', models.BooleanField(default=False)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': ' Déclaration de Durabilité',
                'verbose_name_plural': ' Déclarations de Durabilité',
                'db_table': 'declarations',
            },
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['added_by'], name='lots_v2_added_b_a00961_idx'),
        ),
        migrations.RemoveField(
            model_name='sustainabilitydeclaration',
            name='month',
        ),
        migrations.RemoveField(
            model_name='sustainabilitydeclaration',
            name='year',
        ),
        migrations.AddField(
            model_name='sustainabilitydeclaration',
            name='deadline',
            field=models.DateField(blank=True, default=datetime.datetime.now),
        ),
        migrations.AddField(
            model_name='sustainabilitydeclaration',
            name='period',
            field=models.DateField(blank=True, default=datetime.datetime.now),
        ),
        migrations.AddField(
            model_name='sustainabilitydeclaration',
            name='declared',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ControlMessages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('dt_added', models.DateTimeField(auto_now_add=True)),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.control')),
                ('entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contrôle - Message',
                'verbose_name_plural': 'Contrôles - Messages',
                'db_table': 'control_messages',
            },
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='category',
            field=models.CharField(choices=[('CONV', 'Conventionnel'), ('ANN-IX-A', 'ANNEXE IX-A'), ('ANN-IX-B', 'ANNEXE IX-B'), ('OTHER', 'Autre')], default='CONV', max_length=32),
        ),
        migrations.RemoveField(
            model_name='entity',
            name='producer_with_mac',
        ),
        migrations.RemoveField(
            model_name='entity',
            name='producer_with_trading',
        ),
        migrations.AddField(
            model_name='lotvalidationerror',
            name='acked_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lotvalidationerror',
            name='highlighted_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='sustainabilitydeclaration',
            name='reminder_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='entity',
            name='legal_name',
            field=models.CharField(blank=True, default='', max_length=128),
        ),
        migrations.AddField(
            model_name='entity',
            name='registered_address',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='entity',
            name='registration_id',
            field=models.CharField(blank=True, default='', max_length=64),
        ),
        migrations.AddField(
            model_name='entity',
            name='sustainability_officer',
            field=models.CharField(blank=True, default='', max_length=32),
        ),
        migrations.AddField(
            model_name='entity',
            name='sustainability_officer_phone_number',
            field=models.CharField(blank=True, default='', max_length=32),
        ),
        migrations.AlterField(
            model_name='depot',
            name='address',
            field=models.CharField(blank=True, max_length=128),
        ),
        migrations.AlterField(
            model_name='depot',
            name='postal_code',
            field=models.CharField(blank=True, max_length=32),
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='champ_libre',
            field=models.CharField(blank=True, default='', max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='lotvalidationerror',
            name='tx',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.lottransaction'),
        ),
        migrations.AddField(
            model_name='lotvalidationerror',
            name='warning_to_recipient',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='lotv2',
            name='volume',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='vendor_certificate',
            field=models.CharField(blank=True, default='', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='is_transformed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='entitydepot',
            name='blender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blender', to='core.entity'),
        ),
        migrations.AddField(
            model_name='entitydepot',
            name='blending_is_outsourced',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ETBETransformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volume_ethanol', models.FloatField(default=0.0)),
                ('volume_etbe', models.FloatField(default=0.0)),
                ('volume_denaturant', models.FloatField(default=0.0)),
                ('volume_fossile', models.FloatField(default=0.0)),
                ('volume_pertes', models.FloatField(default=0.0)),
                ('added_time', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('added_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('new_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_stock', to='core.lottransaction')),
                ('previous_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='previous_stock', to='core.lottransaction')),
            ],
            options={
                'verbose_name': 'Transformation ETBE',
                'verbose_name_plural': 'Transformations ETBE',
                'db_table': 'etbe_transformations',
            },
        ),
        migrations.AddField(
            model_name='lotv2',
            name='carbure_production_site_reference',
            field=models.CharField(blank=True, default='', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='unknown_vendor',
            field=models.CharField(blank=True, default='', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='unknown_vendor_certificate',
            field=models.CharField(blank=True, default='', max_length=64, null=True),
        ),
        migrations.RunPython(
            code=core.migrations.0120_auto_20210317_1725.transfer_unknown_vendor,
        ),
        migrations.RenameField(
            model_name='lottransaction',
            old_name='vendor_certificate',
            new_name='carbure_vendor_certificate',
        ),
        migrations.RemoveField(
            model_name='lottransaction',
            name='unknown_vendor',
        ),
        migrations.RemoveField(
            model_name='lottransaction',
            name='vendor_is_in_carbure',
        ),
        migrations.RenameField(
            model_name='lotv2',
            old_name='unknown_vendor',
            new_name='unknown_supplier',
        ),
        migrations.RenameField(
            model_name='lotv2',
            old_name='unknown_vendor_certificate',
            new_name='unknown_supplier_certificate',
        ),
        migrations.CreateModel(
            name='REDCertCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.CharField(max_length=64)),
                ('certificate_holder', models.CharField(max_length=256)),
                ('city', models.CharField(default='', max_length=256)),
                ('zip_code', models.CharField(default='', max_length=12)),
                ('country_raw', models.CharField(default='', max_length=32)),
                ('valid_from', models.DateField()),
                ('valid_until', models.DateField()),
                ('certificator', models.CharField(default='', max_length=256)),
                ('certificate_type', models.CharField(default='', max_length=256)),
                ('status', models.CharField(default='', max_length=32)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pays')),
            ],
            options={
                'verbose_name': 'REDCert Certificate',
                'verbose_name_plural': 'REDCert Certificates',
                'db_table': 'redcert_certificates',
            },
        ),
        migrations.CreateModel(
            name='REDCertScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', models.CharField(max_length=8)),
                ('description_fr', models.CharField(max_length=256)),
                ('description_en', models.CharField(max_length=256)),
                ('description_de', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'REDCert Scope',
                'verbose_name_plural': 'REDCert Scopes',
                'db_table': 'redcert_scopes',
            },
        ),
        migrations.AlterField(
            model_name='productionsitecertificate',
            name='type',
            field=models.CharField(choices=[('ISCC', 'ISCC'), ('2BS', '2BS'), ('REDCERT', 'REDCERT')], default='Pending', max_length=32),
        ),
        migrations.CreateModel(
            name='REDCertCertificateScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.redcertcertificate')),
                ('scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.redcertscope')),
            ],
            options={
                'verbose_name': 'REDCert Certificate Scope',
                'verbose_name_plural': 'REDCert Certificate Scopes',
                'db_table': 'redcert_certificates_scopes',
            },
        ),
        migrations.CreateModel(
            name='EntityREDCertTradingCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_been_updated', models.BooleanField(default=False)),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.redcertcertificate')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': 'Certificat de Trading REDCert',
                'verbose_name_plural': 'Certificats de Trading REDCert',
                'db_table': 'entity_redcert_trading_certificates',
            },
        ),
        migrations.AddField(
            model_name='productionsitecertificate',
            name='certificate_redcert',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entityredcerttradingcertificate'),
        ),
        migrations.CreateModel(
            name='REDCertBiomassType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16)),
                ('description_fr', models.CharField(max_length=256)),
                ('description_en', models.CharField(max_length=256)),
                ('description_de', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'REDCert Biomass Type',
                'verbose_name_plural': 'REDCert Biomass Types',
                'db_table': 'redcert_biomass_types',
            },
        ),
        migrations.CreateModel(
            name='REDCertCertificateBiomass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biomass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.redcertbiomasstype')),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.redcertcertificate')),
            ],
            options={
                'verbose_name': 'REDCert Certificate Biomass',
                'verbose_name_plural': 'REDCert Certificate Biomass',
                'db_table': 'redcert_certificates_biomass',
            },
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='is_forwarded',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='depot',
            name='depot_type',
            field=models.CharField(choices=[('EFS', 'EFS'), ('EFPE', 'EFPE'), ('OIL DEPOT', 'OIL DEPOT'), ('BIOFUEL DEPOT', 'BIOFUEL DEPOT'), ('OTHER', 'Autre')], default='OTHER', max_length=32),
        ),
        migrations.AlterField(
            model_name='entitydepot',
            name='ownership_type',
            field=models.CharField(choices=[('OWN', 'Propre'), ('THIRD_PARTY', 'Tiers'), ('PROCESSING', 'Processing')], default='THIRD_PARTY', max_length=32),
        ),
        migrations.AddField(
            model_name='productionsitecertificate',
            name='certificate_sn',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='certificates.entitysntradingcertificate'),
        ),
        migrations.AlterField(
            model_name='productionsitecertificate',
            name='type',
            field=models.CharField(choices=[('ISCC', 'ISCC'), ('2BS', '2BS'), ('REDCERT', 'REDCERT'), ('SN', 'SN')], default='Pending', max_length=32),
        ),
        migrations.RemoveField(
            model_name='entity',
            name='national_system_certificate',
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='generated_by_carbure',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='remaining_volume',
            field=models.FloatField(default=0.0),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='dbscertificatescope',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='dbscertificatescope',
                    name='scope',
                ),
                migrations.RemoveField(
                    model_name='entitydbstradingcertificate',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='entitydbstradingcertificate',
                    name='entity',
                ),
                migrations.RemoveField(
                    model_name='entityiscctradingcertificate',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='entityiscctradingcertificate',
                    name='entity',
                ),
                migrations.RemoveField(
                    model_name='entityredcerttradingcertificate',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='entityredcerttradingcertificate',
                    name='entity',
                ),
                migrations.RemoveField(
                    model_name='iscccertificaterawmaterial',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='iscccertificatescope',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='iscccertificatescope',
                    name='scope',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='certificate_2bs',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='certificate_iscc',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='certificate_redcert',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='certificate_sn',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='entity',
                ),
                migrations.RemoveField(
                    model_name='productionsitecertificate',
                    name='production_site',
                ),
                migrations.RemoveField(
                    model_name='redcertcertificate',
                    name='country',
                ),
                migrations.RemoveField(
                    model_name='redcertcertificatebiomass',
                    name='biomass',
                ),
                migrations.RemoveField(
                    model_name='redcertcertificatebiomass',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='redcertcertificatescope',
                    name='certificate',
                ),
                migrations.RemoveField(
                    model_name='redcertcertificatescope',
                    name='scope',
                ),
                migrations.DeleteModel(
                    name='DBSCertificate',
                ),
                migrations.DeleteModel(
                    name='DBSCertificateScope',
                ),
                migrations.DeleteModel(
                    name='DBSScope',
                ),
                migrations.DeleteModel(
                    name='EntityDBSTradingCertificate',
                ),
                migrations.DeleteModel(
                    name='EntityISCCTradingCertificate',
                ),
                migrations.DeleteModel(
                    name='EntityREDCertTradingCertificate',
                ),
                migrations.DeleteModel(
                    name='ISCCCertificate',
                ),
                migrations.DeleteModel(
                    name='ISCCCertificateRawMaterial',
                ),
                migrations.DeleteModel(
                    name='ISCCCertificateScope',
                ),
                migrations.DeleteModel(
                    name='ISCCScope',
                ),
                migrations.DeleteModel(
                    name='ProductionSiteCertificate',
                ),
                migrations.DeleteModel(
                    name='REDCertBiomassType',
                ),
                migrations.DeleteModel(
                    name='REDCertCertificate',
                ),
                migrations.DeleteModel(
                    name='REDCertCertificateBiomass',
                ),
                migrations.DeleteModel(
                    name='REDCertCertificateScope',
                ),
                migrations.DeleteModel(
                    name='REDCertScope',
                ),
            ],
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='volume_fossile',
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='volume_pertes',
        ),
        migrations.AddField(
            model_name='etbetransformation',
            name='volume_etbe_eligible',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='parent_tx',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction'),
        ),
        migrations.AddField(
            model_name='userrights',
            name='expiration_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userrights',
            name='role',
            field=models.CharField(choices=[('RO', 'Lecture Seule'), ('RW', 'Lecture/Écriture'), ('ADMIN', 'Administrateur'), ('AUDITOR', 'Auditeur')], default='RO', max_length=32),
        ),
        migrations.AddField(
            model_name='userrightsrequests',
            name='expiration_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userrightsrequests',
            name='role',
            field=models.CharField(choices=[('RO', 'Lecture Seule'), ('RW', 'Lecture/Écriture'), ('ADMIN', 'Administrateur'), ('AUDITOR', 'Auditeur')], default='RO', max_length=32),
        ),
        migrations.AlterField(
            model_name='matierepremiere',
            name='category',
            field=models.CharField(choices=[('CONV', 'Conventionnel'), ('ANN-IX-A', 'ANNEXE IX-A'), ('ANN-IX-B', 'ANNEXE IX-B'), ('TALLOL', 'Tallol'), ('OTHER', 'Autre')], default='CONV', max_length=32),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='is_stock',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='GenericError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_to_creator', models.BooleanField(default=False)),
                ('display_to_recipient', models.BooleanField(default=False)),
                ('display_to_admin', models.BooleanField(default=False)),
                ('display_to_auditor', models.BooleanField(default=False)),
                ('acked_by_creator', models.BooleanField(default=False)),
                ('acked_by_recipient', models.BooleanField(default=False)),
                ('acked_by_admin', models.BooleanField(default=False)),
                ('acked_by_auditor', models.BooleanField(default=False)),
                ('highlighted_by_admin', models.BooleanField(default=False)),
                ('highlighted_by_auditor', models.BooleanField(default=False)),
                ('is_blocking', models.BooleanField(default=False)),
                ('field', models.CharField(blank=True, max_length=64, null=True)),
                ('value', models.CharField(blank=True, max_length=128, null=True)),
                ('error', models.CharField(max_length=256)),
                ('extra', models.CharField(blank=True, max_length=256, null=True)),
                ('tx', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
            ],
            options={
                'verbose_name': 'Generic Error',
                'verbose_name_plural': 'Generic Errors',
                'db_table': 'generic_errors',
            },
        ),
        migrations.DeleteModel(
            name='CheckRule',
        ),
        migrations.DeleteModel(
            name='GHGValues',
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='delivery_status',
            field=models.CharField(choices=[('N', 'En Attente'), ('A', 'Accepté'), ('R', 'Refusé'), ('AC', 'À corriger'), ('AA', 'Corrigé'), ('F', 'Déclaré')], default='N', max_length=64),
        ),
        migrations.AlterField(
            model_name='lotv2',
            name='status',
            field=models.CharField(choices=[('Draft', 'Brouillon'), ('Validated', 'Validé'), ('Declared', 'Déclaré')], default='Draft', max_length=64),
        ),
        migrations.AlterField(
            model_name='entity',
            name='sustainability_officer',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AlterField(
            model_name='genericerror',
            name='tx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction'),
        ),
        migrations.RunPython(
            code=core.migrations.0144_auto_20210514_1643.transfer_errors,
        ),
        migrations.RemoveField(
            model_name='lotvalidationerror',
            name='lot',
        ),
        migrations.RemoveField(
            model_name='lotvalidationerror',
            name='tx',
        ),
        migrations.RemoveField(
            model_name='transactionerror',
            name='tx',
        ),
        migrations.DeleteModel(
            name='LotV2Error',
        ),
        migrations.DeleteModel(
            name='LotValidationError',
        ),
        migrations.DeleteModel(
            name='TransactionError',
        ),
        migrations.AlterField(
            model_name='lotv2',
            name='status',
            field=models.CharField(choices=[('Draft', 'Brouillon'), ('Validated', 'Validé')], default='Draft', max_length=64),
        ),
        migrations.CreateModel(
            name='TransactionUpdateHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('update_type', models.CharField(choices=[('ADD', 'ADD'), ('REMOVE', 'REMOVE'), ('UPDATE', 'UPDATE')], default='ADD', max_length=32)),
                ('field', models.CharField(max_length=64)),
                ('value_before', models.TextField(null=True)),
                ('value_after', models.TextField(null=True)),
                ('tx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('modified_by_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
            ],
            options={
                'verbose_name': 'Transaction Update',
                'verbose_name_plural': 'Transaction Updates',
                'db_table': 'transactions_updates',
            },
        ),
        migrations.AlterField(
            model_name='entity',
            name='entity_type',
            field=models.CharField(choices=[('Producteur', 'Producteur'), ('Opérateur', 'Opérateur'), ('Administration', 'Administration'), ('Trader', 'Trader'), ('Auditor', 'Auditeur'), ('Unknown', 'Unknown')], default='Unknown', max_length=64),
        ),
        migrations.AddField(
            model_name='genericerror',
            name='fields',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['delivery_status'], name='transaction_deliver_6b302e_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['period'], name='lots_v2_period_a58f40_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['unknown_client'], name='transaction_unknown_711932_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['is_forwarded'], name='transaction_is_forw_1ca55a_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['is_mac'], name='transaction_is_mac_84515f_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['carbure_delivery_site'], name='transaction_carbure_fead82_idx'),
        ),
        migrations.AddIndex(
            model_name='lottransaction',
            index=models.Index(fields=['unknown_delivery_site'], name='transaction_unknown_05604b_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['biocarburant'], name='lots_v2_biocarb_9ff256_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['matiere_premiere'], name='lots_v2_matiere_030cbc_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['pays_origine'], name='lots_v2_pays_or_0ac02b_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['carbure_production_site'], name='lots_v2_carbure_6595be_idx'),
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['unknown_production_site'], name='lots_v2_unknown_14a9ed_idx'),
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='champ_libre',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.RunPython(
            code=core.migrations.0157_auto_20210531_1151.update_rights,
        ),
        migrations.AddField(
            model_name='entity',
            name='hash',
            field=models.CharField(blank=True, default='', max_length=32, null=True),
        ),
        migrations.RunPython(
            code=core.migrations.0158_entity_hash.update_entity_hash,
        ),
        migrations.RemoveField(
            model_name='entity',
            name='trading_certificate',
        ),
        migrations.AddField(
            model_name='entity',
            name='default_certificate',
            field=models.CharField(blank=True, default='', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='hidden_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='hidden_by_auditor',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='highlighted_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='highlighted_by_auditor',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('notif_type', models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOT_CHANGED', 'LOT_CHANGED'), ('LOT_REJECTED', 'LOT_REJECTED'), ('LOT_PENDING', 'LOT_PENDING'), ('DEADLINE_APPROACHING', 'DEADLINE_APPROACHING'), ('DOCUMENTATION_REQUESTED', 'DOCUMENTATION_REQUESTED')], default='', max_length=32)),
                ('sent', models.BooleanField(default=False)),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('linked_tx', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
            ],
            options={
                'verbose_name': 'Email Notification',
                'verbose_name_plural': 'Email Notifications',
                'db_table': 'email_notifications',
            },
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='compatible_diesel',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='compatible_essence',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='year',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            code=core.migrations.0164_lotv2_year.update_lot_year,
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='delivery_status',
            field=models.CharField(choices=[('N', 'En attente'), ('A', 'Accepté'), ('R', 'Refusé'), ('AC', 'À corriger'), ('AA', 'Corrigé'), ('F', 'Déclaré')], default='N', max_length=64),
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='name_en',
            field=models.CharField(default='', max_length=64),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='name_en',
            field=models.CharField(default='', max_length=128),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=core.migrations.0167_auto_20210622_1708.save_bc_english_names,
        ),
        migrations.RunPython(
            code=core.migrations.0167_auto_20210622_1708.save_mp_english_names,
        ),
        migrations.AddField(
            model_name='emailnotification',
            name='send_copy_to_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='notif_type',
            field=models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOT_CHANGED', 'LOT_CHANGED'), ('LOT_REJECTED', 'LOT_REJECTED'), ('LOT_PENDING', 'LOT_PENDING'), ('DEADLINE_APPROACHING', 'DEADLINE_APPROACHING'), ('DOCUMENTATION_REQUESTED', 'DOCUMENTATION_REQUESTED'), ('DECLARATION_INVALIDATED', 'DECLARATION_INVALIDATED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED')], default='', max_length=32),
        ),
        migrations.AddField(
            model_name='emailnotification',
            name='linked_declaration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.sustainabilitydeclaration'),
        ),
        migrations.AddField(
            model_name='depot',
            name='gps_coordinates',
            field=models.CharField(blank=True, default=None, max_length=64, null=True),
        ),
        migrations.CreateModel(
            name='TransactionDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_point', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('delivery_point', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('distance', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Distance',
                'verbose_name_plural': 'Distances',
                'db_table': 'transaction_distances',
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='notifications_enabled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='transaction_type',
            field=models.CharField(choices=[('BIOFUEL_DELIVERY', 'BIOFUEL_DELIVERY'), ('MAC', 'MAC'), ('DIRECT_DELIVERY', 'DIRECT_DELIVERY')], default='BIOFUEL_DELIVERY', max_length=32),
        ),
        migrations.RunPython(
            code=core.migrations.0174_auto_20210702_1622.recalc_ges_red2,
        ),
        migrations.AddIndex(
            model_name='lotv2',
            index=models.Index(fields=['year'], name='lots_v2_year_87d135_idx'),
        ),
        migrations.RunPython(
            code=core.migrations.0176_auto_20210726_1338.update_entity_hash,
        ),
        migrations.CreateModel(
            name='AdminTransactionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('tx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lottransaction')),
                ('datetime', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'AdminTransactionComment',
                'verbose_name_plural': 'AdminTransactionComments',
                'db_table': 'admin_tx_comments',
            },
        ),
        migrations.RunPython(
            code=core.migrations.0179_auto_20210810_1407.update_stocks,
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='notif_type',
            field=models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOT_REJECTED', 'LOT_REJECTED'), ('LOT_PENDING', 'LOT_PENDING'), ('DECLARATION_INVALIDATED', 'DECLARATION_INVALIDATED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED')], default='', max_length=32),
        ),
        migrations.RunPython(
            code=core.migrations.0181_auto_20210810_1644.cleanup_notifs,
        ),
        migrations.AddField(
            model_name='admintransactioncomment',
            name='is_visible_by_admin',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='admintransactioncomment',
            name='is_visible_by_auditor',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='ghg_reduction_red_ii',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='lotv2',
            name='ghg_reference_red_ii',
            field=models.FloatField(default=0.0),
        ),
        migrations.RunPython(
            code=core.migrations.0184_auto_20210827_1026.set_red_ii_ghg_values,
        ),
        migrations.AlterField(
            model_name='entity',
            name='entity_type',
            field=models.CharField(choices=[('Producteur', 'Producteur'), ('Opérateur', 'Opérateur'), ('Administration', 'Administration'), ('Trader', 'Trader'), ('Auditor', 'Auditeur'), ('Administration Externe', 'Administration Externe'), ('Unknown', 'Unknown')], default='Unknown', max_length=64),
        ),
        migrations.CreateModel(
            name='ExternalAdminRights',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('right', models.CharField(choices=[('DCA', 'DCA'), ('AGRIMER', 'AGRIMER'), ('TIRIB', 'TIRIB')], default='', max_length=32)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': 'External Admin Right',
                'verbose_name_plural': 'External Admin Rights',
                'db_table': 'ext_admin_rights',
            },
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='potential_duplicate',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='admintransactioncomment',
            name='entity',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='lottransaction',
            name='child_tx',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child', to='core.lottransaction'),
        ),
        migrations.AlterField(
            model_name='lottransaction',
            name='parent_tx',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='core.lottransaction'),
        ),
        migrations.CreateModel(
            name='CarbureLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.IntegerField()),
                ('year', models.IntegerField()),
                ('carbure_id', models.CharField(blank=True, default='', max_length=64)),
                ('unknown_producer', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_production_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_commissioning_date', models.DateField(blank=True, null=True)),
                ('production_site_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_certificate_type', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_double_counting_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_supplier', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('supplier_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('supplier_certificate_type', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('transport_document_type', models.CharField(choices=[('DAU', 'DAU'), ('DAE', 'DAE'), ('DSA', 'DSA'), ('DSAC', 'DSAC'), ('DSP', 'DSP'), ('OTHER', 'OTHER')], default='DAE', max_length=12)),
                ('transport_document_reference', models.CharField(blank=True, default=None, max_length=128, null=True)),
                ('unknown_client', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('dispatch_date', models.DateField(blank=True, null=True)),
                ('unknown_dispatch_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('unknown_delivery_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('lot_status', models.CharField(choices=[('DRAFT', 'DRAFT'), ('PENDING', 'PENDING'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('FROZEN', 'FROZEN'), ('DELETED', 'DELETED')], default='DRAFT', max_length=24)),
                ('correction_status', models.CharField(choices=[('NO_PROBLEMO', 'NO_PROBLEMO'), ('IN_CORRECTION', 'IN_CORRECTION'), ('FIXED', 'FIXED')], default='NO_PROBLEMO', max_length=64)),
                ('delivery_type', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('RFC', 'RFC'), ('STOCK', 'STOCK'), ('BLENDING', 'BLENDING'), ('EXPORT', 'EXPORT'), ('TRADING', 'TRADING'), ('PROCESSING', 'PROCESSING'), ('DIRECT', 'DIRECT'), ('FLUSHED', 'FLUSHED')], default='UNKNOWN', max_length=64)),
                ('declared_by_supplier', models.BooleanField(default=False)),
                ('declared_by_client', models.BooleanField(default=False)),
                ('volume', models.FloatField(default=0.0)),
                ('weight', models.FloatField(default=0.0)),
                ('lhv_amount', models.FloatField(default=0.0)),
                ('eec', models.FloatField(default=0.0)),
                ('el', models.FloatField(default=0.0)),
                ('ep', models.FloatField(default=0.0)),
                ('etd', models.FloatField(default=0.0)),
                ('eu', models.FloatField(default=0.0)),
                ('esca', models.FloatField(default=0.0)),
                ('eccs', models.FloatField(default=0.0)),
                ('eccr', models.FloatField(default=0.0)),
                ('eee', models.FloatField(default=0.0)),
                ('ghg_total', models.FloatField(default=0.0)),
                ('ghg_reference', models.FloatField(default=0.0)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('ghg_reference_red_ii', models.FloatField(default=0.0)),
                ('ghg_reduction_red_ii', models.FloatField(default=0.0)),
                ('free_field', models.TextField(blank=True, default=None, null=True)),
                ('highlighted_by_admin', models.BooleanField(default=False)),
                ('highlighted_by_auditor', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'CarbureLot',
                'verbose_name_plural': 'CarbureLots',
                'db_table': 'carbure_lots',
            },
        ),
        migrations.CreateModel(
            name='CarbureLotComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('REGULAR', 'REGULAR'), ('AUDITOR', 'AUDITOR'), ('ADMIN', 'ADMIN')], default='REGULAR', max_length=16)),
                ('comment_dt', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
                ('is_visible_by_admin', models.BooleanField(default=False)),
                ('is_visible_by_auditor', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'CarbureLotComment',
                'verbose_name_plural': 'CarbureLotComments',
                'db_table': 'carbure_lots_comments',
            },
        ),
        migrations.CreateModel(
            name='CarbureLotEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('CREATED', 'CREATED'), ('UPDATED', 'UPDATED'), ('VALIDATED', 'VALIDATED'), ('FIX_REQUESTED', 'FIX_REQUESTED'), ('MARKED_AS_FIXED', 'MARKED_AS_FIXED'), ('FIX_ACCEPTED', 'FIX_ACCEPTED'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('RECALLED', 'RECALLED'), ('DECLARED', 'DECLARED'), ('DELETED', 'DELETED'), ('DECLCANCEL', 'DECLCANCEL'), ('RESTORED', 'RESTORED')], max_length=32)),
                ('event_dt', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CarbureLotEvent',
                'verbose_name_plural': 'CarbureLotEvents',
                'db_table': 'carbure_lots_events',
            },
        ),
        migrations.CreateModel(
            name='CarbureNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notif_dt', models.DateTimeField(auto_now_add=True)),
                ('send_copy_to_admin', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_dt', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Carbure Email Notification',
                'verbose_name_plural': 'Cabure Email Notifications',
                'db_table': 'carbure_notifications',
            },
        ),
        migrations.CreateModel(
            name='CarbureStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carbure_id', models.CharField(default='', max_length=64)),
                ('remaining_volume', models.FloatField(default=0.0)),
                ('remaining_weight', models.FloatField(default=0.0)),
                ('remaining_lhv_amount', models.FloatField(default=0.0)),
                ('unknown_production_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_supplier', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('ghg_reduction_red_ii', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'CarbureStock',
                'verbose_name_plural': 'CarbureStocks',
                'db_table': 'carbure_stock',
            },
        ),
        migrations.CreateModel(
            name='CarbureStockEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('CREATED', 'CREATED'), ('UPDATED', 'UPDATED'), ('SPLIT', 'SPLIT'), ('UNSPLIT', 'UNSPLIT'), ('FLUSHED', 'FLUSHED'), ('TRANSFORMED', 'TRANSFORMED'), ('UNTRANSFORMED', 'UNTRANSFORMED')], max_length=32)),
                ('event_dt', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CarbureStockEvent',
                'verbose_name_plural': 'CarbureStockEvents',
                'db_table': 'carbure_stock_events',
            },
        ),
        migrations.CreateModel(
            name='CarbureStockTransformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transformation_type', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('ETH_ETBE', 'ETH_ETBE')], default='UNKNOWN', max_length=32)),
                ('volume_deducted_from_source', models.FloatField(default=0.0)),
                ('volume_destination', models.FloatField(default=0.0)),
                ('metadata', models.JSONField()),
                ('transformation_dt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'CarbureStockTransformation',
                'verbose_name_plural': 'CarbureStockTransformation',
                'db_table': 'carbure_stock_transformations',
            },
        ),
        migrations.CreateModel(
            name='EntityCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'CarbureEntityCertificates',
                'verbose_name_plural': 'CarbureEntityCertificates',
                'db_table': 'carbure_entity_certificates',
            },
        ),
        migrations.CreateModel(
            name='GenericCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.CharField(max_length=64)),
                ('certificate_type', models.CharField(choices=[('SYSTEME_NATIONAL', 'SYSTEME_NATIONAL'), ('ISCC', 'ISCC'), ('REDCERT', 'REDCERT'), ('2BS', '2BS')], max_length=32)),
                ('certificate_holder', models.CharField(max_length=512)),
                ('certificate_issuer', models.CharField(blank=True, max_length=256, null=True)),
                ('address', models.CharField(blank=True, max_length=512, null=True)),
                ('valid_from', models.DateField()),
                ('valid_until', models.DateField()),
                ('download_link', models.CharField(default=None, max_length=512, null=True)),
                ('scope', models.JSONField(null=True)),
                ('input', models.JSONField(null=True)),
                ('output', models.JSONField(null=True)),
            ],
            options={
                'verbose_name': 'CarbureCertificates',
                'verbose_name_plural': 'CarbureCertificates',
                'db_table': 'carbure_certificates',
            },
        ),
        migrations.AddField(
            model_name='biocarburant',
            name='dgddi_category',
            field=models.CharField(blank=True, default=None, max_length=8, null=True),
        ),
        migrations.AddField(
            model_name='depot',
            name='accise',
            field=models.CharField(blank=True, default=None, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='matierepremiere',
            name='dgddi_category',
            field=models.CharField(blank=True, default=None, max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='genericerror',
            name='tx',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.lottransaction'),
        ),
        migrations.AddIndex(
            model_name='genericcertificate',
            index=models.Index(fields=['certificate_type'], name='carbure_cer_certifi_e5a0bd_idx'),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='certificate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.genericcertificate'),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='dest_stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dest_stock', to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='source_stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_stock', to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='transformed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburestockevent',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestockevent',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='biofuel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.biocarburant'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='carbure_client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_carbure_client', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='carbure_production_site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='producers.productionsite'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='carbure_supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_carbure_supplier', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='country_of_origin',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_country_of_origin', to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='depot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.depot'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='feedstock',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.matierepremiere'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='parent_lot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.carburelot'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='parent_transformation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.carburestocktransformation'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='production_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_production_country', to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburenotification',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburelotevent'),
        ),
        migrations.AddField(
            model_name='carburenotification',
            name='recipient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelotevent',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburelot'),
        ),
        migrations.AddField(
            model_name='carburelotevent',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburelotcomment',
            name='entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelotcomment',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburelot'),
        ),
        migrations.AddField(
            model_name='carburelotcomment',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='added_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='biofuel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.biocarburant'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_client',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_client', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_delivery_site',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_delivery_site', to='core.depot'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_dispatch_site',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_dispatch_site', to='core.depot'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_producer',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_producer', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_production_site',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='producers.productionsite'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_supplier', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='country_of_origin',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='country_of_origin', to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='delivery_site_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivery_site_country', to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='dispatch_site_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatch_site_country', to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='feedstock',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.matierepremiere'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='parent_lot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.carburelot'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='parent_stock',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='production_country',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='production_country', to='core.pays'),
        ),
        migrations.AddField(
            model_name='genericerror',
            name='lot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.carburelot'),
        ),
        migrations.AddIndex(
            model_name='entitycertificate',
            index=models.Index(fields=['entity'], name='carbure_ent_entity__461638_idx'),
        ),
        migrations.AddIndex(
            model_name='carburestocktransformation',
            index=models.Index(fields=['entity'], name='carbure_sto_entity__2e8758_idx'),
        ),
        migrations.AddIndex(
            model_name='carburestockevent',
            index=models.Index(fields=['stock'], name='carbure_sto_stock_i_d107a1_idx'),
        ),
        migrations.AddIndex(
            model_name='carburestock',
            index=models.Index(fields=['carbure_client'], name='carbure_sto_carbure_c4b133_idx'),
        ),
        migrations.AddIndex(
            model_name='carburestock',
            index=models.Index(fields=['carbure_client', 'depot'], name='carbure_sto_carbure_3458dd_idx'),
        ),
        migrations.AddIndex(
            model_name='carburenotification',
            index=models.Index(fields=['is_sent'], name='carbure_not_is_sent_e22c04_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelotevent',
            index=models.Index(fields=['lot'], name='carbure_lot_lot_id_2f39a7_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelotcomment',
            index=models.Index(fields=['lot'], name='carbure_lot_lot_id_dcf25a_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year'], name='carbure_lot_year_870bf1_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'carbure_client'], name='carbure_lot_year_a09da3_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'carbure_supplier'], name='carbure_lot_year_a3ccca_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'period'], name='carbure_lot_year_91dbd3_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'period', 'carbure_client'], name='carbure_lot_year_93dd77_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'period', 'carbure_supplier'], name='carbure_lot_year_2a6c87_idx'),
        ),
        migrations.RunPython(
            code=core.migrations.0191_auto_20211214_1910.certificate_charset,
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='has_been_updated',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=core.migrations.0192_auto_20211230_1225.migrate_certificates,
        ),
        migrations.AddField(
            model_name='carburelot',
            name='carbure_vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carbure_vendor', to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='vendor_certificate',
            field=models.CharField(blank=True, default=None, max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='vendor_certificate_type',
            field=models.CharField(blank=True, default=None, max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='entity',
            name='has_direct_deliveries',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='entity',
            name='has_stocks',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='carburelot',
            name='delivery_type',
            field=models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('RFC', 'RFC'), ('STOCK', 'STOCK'), ('BLENDING', 'BLENDING'), ('EXPORT', 'EXPORT'), ('TRADING', 'TRADING'), ('PROCESSING', 'PROCESSING'), ('DIRECT', 'DIRECT'), ('FLUSHED', 'FLUSHED'), ('NATIONAL', 'NATIONAL')], default='UNKNOWN', max_length=64),
        ),
        migrations.AlterField(
            model_name='carburelot',
            name='delivery_type',
            field=models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('RFC', 'RFC'), ('STOCK', 'STOCK'), ('BLENDING', 'BLENDING'), ('EXPORT', 'EXPORT'), ('TRADING', 'TRADING'), ('PROCESSING', 'PROCESSING'), ('DIRECT', 'DIRECT'), ('FLUSHED', 'FLUSHED')], default='UNKNOWN', max_length=64),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.RemoveField(
            model_name='control',
            name='tx',
        ),
        migrations.RemoveField(
            model_name='controlfiles',
            name='control',
        ),
        migrations.RemoveField(
            model_name='controlmessages',
            name='control',
        ),
        migrations.RemoveField(
            model_name='controlmessages',
            name='entity',
        ),
        migrations.RemoveField(
            model_name='controlmessages',
            name='user',
        ),
        migrations.RemoveField(
            model_name='emailnotification',
            name='entity',
        ),
        migrations.RemoveField(
            model_name='emailnotification',
            name='linked_declaration',
        ),
        migrations.RemoveField(
            model_name='emailnotification',
            name='linked_tx',
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='added_by',
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='added_by_user',
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='new_stock',
        ),
        migrations.RemoveField(
            model_name='etbetransformation',
            name='previous_stock',
        ),
        migrations.RemoveField(
            model_name='transactioncomment',
            name='entity',
        ),
        migrations.RemoveField(
            model_name='transactioncomment',
            name='tx',
        ),
        migrations.RemoveField(
            model_name='transactionupdatehistory',
            name='modified_by',
        ),
        migrations.RemoveField(
            model_name='transactionupdatehistory',
            name='modified_by_entity',
        ),
        migrations.RemoveField(
            model_name='transactionupdatehistory',
            name='tx',
        ),
        migrations.RemoveField(
            model_name='genericerror',
            name='tx',
        ),
        migrations.DeleteModel(
            name='AdminTransactionComment',
        ),
        migrations.DeleteModel(
            name='Control',
        ),
        migrations.DeleteModel(
            name='ControlFiles',
        ),
        migrations.DeleteModel(
            name='ControlMessages',
        ),
        migrations.DeleteModel(
            name='EmailNotification',
        ),
        migrations.DeleteModel(
            name='ETBETransformation',
        ),
        migrations.DeleteModel(
            name='TransactionComment',
        ),
        migrations.DeleteModel(
            name='TransactionUpdateHistory',
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS massbalance_out_transactions_lines;',
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS massbalance_out_transactions;',
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS check_rules;',
        ),
        migrations.DeleteModel(
            name='Lot',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='added_by',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='added_by_user',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='biocarburant',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='carbure_producer',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='carbure_production_site',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='data_origin_entity',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='fused_with',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='matiere_premiere',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='parent_lot',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='pays_origine',
        ),
        migrations.RemoveField(
            model_name='lotv2',
            name='unknown_production_country',
        ),
        migrations.DeleteModel(
            name='LotTransaction',
        ),
        migrations.DeleteModel(
            name='LotV2',
        ),
        migrations.DeleteModel(
            name='CarbureNotification',
        ),
        migrations.CreateModel(
            name='CarbureNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('type', models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOTS_REJECTED', 'LOTS_REJECTED'), ('CERTIFICATE_EXPIRED', 'CERTIFICATE_EXPIRED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED'), ('DECLARATION_CANCELLED', 'DECLARATION_CANCELLED')], max_length=32)),
                ('acked', models.BooleanField(default=False)),
                ('send_by_email', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('dest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': 'CarbureNotification',
                'verbose_name_plural': 'CarbureNotifications',
                'db_table': 'carbure_notifications',
            },
        ),
        migrations.AddIndex(
            model_name='carburenotification',
            index=models.Index(fields=['dest_id'], name='carbure_not_dest_id_4ac7b3_idx'),
        ),
        migrations.AlterField(
            model_name='carburenotification',
            name='type',
            field=models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOTS_REJECTED', 'LOTS_REJECTED'), ('LOTS_RECEIVED', 'LOTS_RECEIVED'), ('CERTIFICATE_EXPIRED', 'CERTIFICATE_EXPIRED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED'), ('DECLARATION_CANCELLED', 'DECLARATION_CANCELLED')], max_length=32),
        ),
        migrations.AddField(
            model_name='carburenotification',
            name='notify_administrator',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='carburenotification',
            name='datetime',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='carburenotification',
            name='type',
            field=models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOTS_REJECTED', 'LOTS_REJECTED'), ('LOTS_RECEIVED', 'LOTS_RECEIVED'), ('LOTS_RECALLED', 'LOTS_RECALLED'), ('CERTIFICATE_EXPIRED', 'CERTIFICATE_EXPIRED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED'), ('DECLARATION_CANCELLED', 'DECLARATION_CANCELLED')], max_length=32),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='checked_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='added_dt',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='rejected_by_admin',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='audit_status',
            field=models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('CONFORM', 'CONFORM'), ('NONCONFORM', 'NONCONFORM')], default='UNKNOWN', max_length=24),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='ml_control_requested',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='random_control_requested',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='data_reliability_score',
            field=models.CharField(default='F', max_length=1),
        ),
        migrations.CreateModel(
            name='CarbureLotReliabilityScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_score', models.IntegerField(default=1)),
                ('score', models.IntegerField(default=1)),
                ('item', models.CharField(choices=[('CUSTOMS_AND_CARBURE_MATCH', 'CUSTOMS_AND_CARBURE_MATCH'), ('DATA_SOURCE_IS_PRODUCER', 'DATA_SOURCE_IS_PRODUCER'), ('LOT_DECLARED', 'LOT_DECLARED'), ('CERTIFICATES_CHECKED', 'CERTIFICATES_CHECKED'), ('ANOMALIES', 'ANOMALIES')], default='Unknown', max_length=32)),
                ('comment', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburelot')),
            ],
            options={
                'verbose_name': 'CarbureLotReliabilityScore',
                'verbose_name_plural': 'CarbureLotReliabilityScores',
                'db_table': 'carbure_lots_scores',
            },
        ),
        migrations.AddIndex(
            model_name='carburelotreliabilityscore',
            index=models.Index(fields=['lot'], name='carbure_lot_lot_id_e75cc9_idx'),
        ),
        migrations.AlterField(
            model_name='carburelotreliabilityscore',
            name='item',
            field=models.CharField(choices=[('CUSTOMS_AND_CARBURE_MATCH', 'CUSTOMS_AND_CARBURE_MATCH'), ('DATA_SOURCE_IS_PRODUCER', 'DATA_SOURCE_IS_PRODUCER'), ('LOT_DECLARED', 'LOT_DECLARED'), ('PRODUCER_CERTIFICATE_CHECKED', 'PRODUCER_CERTIFICATE_CHECKED'), ('SUPPLIER_CERTIFICATE_CHECKED', 'SUPPLIER_CERTIFICATE_CHECKED'), ('SUPPLIER_CERTIFICATE_EXISTS', 'SUPPLIER_CERTIFICATE_EXISTS'), ('FEEDSTOCK_REGISTERED', 'FEEDSTOCK_REGISTERED'), ('BIOFUEL_REGISTERED', 'BIOFUEL_REGISTERED'), ('DELIVERY_SITE_REGISTERED', 'DELIVERY_SITE_REGISTERED')], default='Unknown', max_length=32),
        ),
        migrations.AlterField(
            model_name='carburelotreliabilityscore',
            name='max_score',
            field=models.FloatField(default=1),
        ),
        migrations.AlterField(
            model_name='carburelotreliabilityscore',
            name='score',
            field=models.FloatField(default=1),
        ),
        migrations.RemoveField(
            model_name='carburelotreliabilityscore',
            name='comment',
        ),
        migrations.AddField(
            model_name='carburelotreliabilityscore',
            name='meta',
            field=models.JSONField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name='carburelotreliabilityscore',
            name='item',
            field=models.CharField(choices=[('CUSTOMS_AND_CARBURE_MATCH', 'CUSTOMS_AND_CARBURE_MATCH'), ('DATA_SOURCE_IS_PRODUCER', 'DATA_SOURCE_IS_PRODUCER'), ('LOT_DECLARED', 'LOT_DECLARED'), ('ANOMALIES_CERTIFICATES', 'ANOMALIES_CERTIFICATES'), ('ANOMALIES_CONFIGURATION', 'ANOMALIES_CONFIGURATION')], default='Unknown', max_length=32),
        ),
        migrations.AddField(
            model_name='entity',
            name='preferred_unit',
            field=models.CharField(choices=[('l', 'litres'), ('kg', 'kg'), ('MJ', 'MJ')], default='l', max_length=64),
        ),
        migrations.AddField(
            model_name='carburelot',
            name='ml_scoring',
            field=models.FloatField(default=0.0),
        ),
        migrations.AlterModelOptions(
            name='biocarburant',
            options={'ordering': ['name'], 'verbose_name': 'Biocarburant', 'verbose_name_plural': 'Biocarburants'},
        ),
        migrations.AlterModelOptions(
            name='depot',
            options={'ordering': ['name'], 'verbose_name': 'Dépôt', 'verbose_name_plural': 'Dépôts'},
        ),
        migrations.AlterModelOptions(
            name='entity',
            options={'ordering': ['name'], 'verbose_name': 'Entity', 'verbose_name_plural': 'Entities'},
        ),
        migrations.AlterModelOptions(
            name='matierepremiere',
            options={'ordering': ['name'], 'verbose_name': 'Matiere Premiere', 'verbose_name_plural': 'Matieres Premieres'},
        ),
        migrations.AlterModelOptions(
            name='pays',
            options={'ordering': ['name'], 'verbose_name': 'Pays', 'verbose_name_plural': 'Pays'},
        ),
        migrations.AlterField(
            model_name='carburelotevent',
            name='event_type',
            field=models.CharField(choices=[('CREATED', 'CREATED'), ('UPDATED', 'UPDATED'), ('VALIDATED', 'VALIDATED'), ('FIX_REQUESTED', 'FIX_REQUESTED'), ('MARKED_AS_FIXED', 'MARKED_AS_FIXED'), ('FIX_ACCEPTED', 'FIX_ACCEPTED'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('RECALLED', 'RECALLED'), ('DECLARED', 'DECLARED'), ('DELETED', 'DELETED'), ('DECLCANCEL', 'DECLCANCEL'), ('RESTORED', 'RESTORED'), ('CANCELLED', 'CANCELLED')], max_length=32),
        ),
        migrations.AlterField(
            model_name='carburenotification',
            name='type',
            field=models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOTS_REJECTED', 'LOTS_REJECTED'), ('LOTS_RECEIVED', 'LOTS_RECEIVED'), ('LOTS_RECALLED', 'LOTS_RECALLED'), ('CERTIFICATE_EXPIRED', 'CERTIFICATE_EXPIRED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED'), ('DECLARATION_CANCELLED', 'DECLARATION_CANCELLED'), ('DECLARATION_REMINDER', 'DECLARATION_REMINDER')], max_length=32),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'lot_status'], name='carbure_lot_year_26abfd_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['year', 'period', 'lot_status'], name='carbure_lot_year_636d7c_idx'),
        ),
        migrations.AddIndex(
            model_name='genericerror',
            index=models.Index(fields=['lot'], name='generic_err_lot_id_be0e2d_idx'),
        ),
        migrations.AddIndex(
            model_name='genericerror',
            index=models.Index(fields=['lot', 'acked_by_admin', 'display_to_admin'], name='generic_err_lot_id_226bf8_idx'),
        ),
        migrations.AddIndex(
            model_name='genericerror',
            index=models.Index(fields=['lot', 'acked_by_creator', 'display_to_creator'], name='generic_err_lot_id_5144e1_idx'),
        ),
        migrations.AddIndex(
            model_name='genericerror',
            index=models.Index(fields=['lot', 'acked_by_recipient', 'display_to_recipient'], name='generic_err_lot_id_c3d7d6_idx'),
        ),
        migrations.AddIndex(
            model_name='genericerror',
            index=models.Index(fields=['lot', 'acked_by_auditor', 'display_to_auditor'], name='generic_err_lot_id_f3894c_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['period'], name='carbure_lot_period_03dfac_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['biofuel'], name='carbure_lot_biofuel_abbb0b_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['feedstock'], name='carbure_lot_feedsto_d8cad3_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['carbure_supplier'], name='carbure_lot_carbure_7a9f07_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['carbure_client'], name='carbure_lot_carbure_612b0b_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['carbure_delivery_site'], name='carbure_lot_carbure_a60b71_idx'),
        ),
        migrations.AddIndex(
            model_name='carburelot',
            index=models.Index(fields=['carbure_production_site'], name='carbure_lot_carbure_060fe8_idx'),
        ),
        migrations.AddField(
            model_name='depot',
            name='private',
            field=models.BooleanField(default=False),
        ),
    ]
