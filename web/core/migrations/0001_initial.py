# Generated by Django 4.1.1 on 2022-09-13 10:47

import datetime

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Biocarburant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('name_en', models.CharField(max_length=64)),
                ('description', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
                ('code', models.CharField(max_length=16, unique=True)),
                ('pci_kg', models.FloatField(default=0)),
                ('pci_litre', models.FloatField(default=0)),
                ('masse_volumique', models.FloatField(default=0)),
                ('is_alcool', models.BooleanField(default=False)),
                ('is_graisse', models.BooleanField(default=False)),
                ('is_displayed', models.BooleanField(default=True)),
                ('compatible_essence', models.BooleanField(default=False)),
                ('compatible_diesel', models.BooleanField(default=False)),
                ('dgddi_category', models.CharField(blank=True, default=None, max_length=8, null=True)),
            ],
            options={
                'verbose_name': 'Biocarburant',
                'verbose_name_plural': 'Biocarburants',
                'db_table': 'biocarburants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CarbureLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.IntegerField()),
                ('year', models.IntegerField()),
                ('carbure_id', models.CharField(blank=True, default='', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('unknown_producer', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_production_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_commissioning_date', models.DateField(blank=True, null=True)),
                ('production_site_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_certificate_type', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('production_site_double_counting_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_supplier', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('supplier_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('supplier_certificate_type', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('vendor_certificate', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('vendor_certificate_type', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('transport_document_type', models.CharField(choices=[('DAU', 'DAU'), ('DAE', 'DAE'), ('DSA', 'DSA'), ('DSAC', 'DSAC'), ('DSP', 'DSP'), ('OTHER', 'OTHER')], default='DAE', max_length=12)),
                ('transport_document_reference', models.CharField(blank=True, default=None, max_length=128, null=True)),
                ('unknown_client', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('dispatch_date', models.DateField(blank=True, null=True)),
                ('unknown_dispatch_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('unknown_delivery_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('lot_status', models.CharField(choices=[('DRAFT', 'DRAFT'), ('PENDING', 'PENDING'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('FROZEN', 'FROZEN'), ('DELETED', 'DELETED')], default='DRAFT', max_length=24)),
                ('correction_status', models.CharField(choices=[('NO_PROBLEMO', 'NO_PROBLEMO'), ('IN_CORRECTION', 'IN_CORRECTION'), ('FIXED', 'FIXED')], default='NO_PROBLEMO', max_length=64)),
                ('delivery_type', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('RFC', 'RFC'), ('STOCK', 'STOCK'), ('BLENDING', 'BLENDING'), ('EXPORT', 'EXPORT'), ('TRADING', 'TRADING'), ('PROCESSING', 'PROCESSING'), ('DIRECT', 'DIRECT'), ('FLUSHED', 'FLUSHED')], default='UNKNOWN', max_length=64)),
                ('declared_by_supplier', models.BooleanField(default=False)),
                ('declared_by_client', models.BooleanField(default=False)),
                ('volume', models.FloatField(default=0.0)),
                ('weight', models.FloatField(default=0.0)),
                ('lhv_amount', models.FloatField(default=0.0)),
                ('eec', models.FloatField(default=0.0)),
                ('el', models.FloatField(default=0.0)),
                ('ep', models.FloatField(default=0.0)),
                ('etd', models.FloatField(default=0.0)),
                ('eu', models.FloatField(default=0.0)),
                ('esca', models.FloatField(default=0.0)),
                ('eccs', models.FloatField(default=0.0)),
                ('eccr', models.FloatField(default=0.0)),
                ('eee', models.FloatField(default=0.0)),
                ('ghg_total', models.FloatField(default=0.0)),
                ('ghg_reference', models.FloatField(default=0.0)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('ghg_reference_red_ii', models.FloatField(default=0.0)),
                ('ghg_reduction_red_ii', models.FloatField(default=0.0)),
                ('free_field', models.TextField(blank=True, default=None, null=True)),
                ('highlighted_by_admin', models.BooleanField(default=False)),
                ('highlighted_by_auditor', models.BooleanField(default=False)),
                ('random_control_requested', models.BooleanField(default=False)),
                ('ml_control_requested', models.BooleanField(default=False)),
                ('ml_scoring', models.FloatField(default=0.0)),
                ('audit_status', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('CONFORM', 'CONFORM'), ('NONCONFORM', 'NONCONFORM')], default='UNKNOWN', max_length=24)),
                ('data_reliability_score', models.CharField(default='F', max_length=1)),
            ],
            options={
                'verbose_name': 'CarbureLot',
                'verbose_name_plural': 'CarbureLots',
                'db_table': 'carbure_lots',
            },
        ),
        migrations.CreateModel(
            name='CarbureLotComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('REGULAR', 'REGULAR'), ('AUDITOR', 'AUDITOR'), ('ADMIN', 'ADMIN')], default='REGULAR', max_length=16)),
                ('comment_dt', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
                ('is_visible_by_admin', models.BooleanField(default=False)),
                ('is_visible_by_auditor', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'CarbureLotComment',
                'verbose_name_plural': 'CarbureLotComments',
                'db_table': 'carbure_lots_comments',
            },
        ),
        migrations.CreateModel(
            name='CarbureLotEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('CREATED', 'CREATED'), ('UPDATED', 'UPDATED'), ('VALIDATED', 'VALIDATED'), ('FIX_REQUESTED', 'FIX_REQUESTED'), ('MARKED_AS_FIXED', 'MARKED_AS_FIXED'), ('FIX_ACCEPTED', 'FIX_ACCEPTED'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('RECALLED', 'RECALLED'), ('DECLARED', 'DECLARED'), ('DELETED', 'DELETED'), ('DECLCANCEL', 'DECLCANCEL'), ('RESTORED', 'RESTORED'), ('CANCELLED', 'CANCELLED')], max_length=32)),
                ('event_dt', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CarbureLotEvent',
                'verbose_name_plural': 'CarbureLotEvents',
                'db_table': 'carbure_lots_events',
            },
        ),
        migrations.CreateModel(
            name='CarbureLotReliabilityScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_score', models.FloatField(default=1)),
                ('score', models.FloatField(default=1)),
                ('item', models.CharField(choices=[('CUSTOMS_AND_CARBURE_MATCH', 'CUSTOMS_AND_CARBURE_MATCH'), ('DATA_SOURCE_IS_PRODUCER', 'DATA_SOURCE_IS_PRODUCER'), ('LOT_DECLARED', 'LOT_DECLARED'), ('ANOMALIES_CERTIFICATES', 'ANOMALIES_CERTIFICATES'), ('ANOMALIES_CONFIGURATION', 'ANOMALIES_CONFIGURATION')], default='Unknown', max_length=32)),
                ('meta', models.JSONField(blank=True, default=None, null=True)),
            ],
            options={
                'verbose_name': 'CarbureLotReliabilityScore',
                'verbose_name_plural': 'CarbureLotReliabilityScores',
                'db_table': 'carbure_lots_scores',
            },
        ),
        migrations.CreateModel(
            name='CarbureNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('CORRECTION_REQUEST', 'CORRECTION_REQUEST'), ('CORRECTION_DONE', 'CORRECTION_DONE'), ('LOTS_REJECTED', 'LOTS_REJECTED'), ('LOTS_RECEIVED', 'LOTS_RECEIVED'), ('LOTS_RECALLED', 'LOTS_RECALLED'), ('CERTIFICATE_EXPIRED', 'CERTIFICATE_EXPIRED'), ('DECLARATION_VALIDATED', 'DECLARATION_VALIDATED'), ('DECLARATION_CANCELLED', 'DECLARATION_CANCELLED'), ('DECLARATION_REMINDER', 'DECLARATION_REMINDER')], max_length=32)),
                ('acked', models.BooleanField(default=False)),
                ('send_by_email', models.BooleanField(default=False)),
                ('notify_administrator', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('meta', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CarbureNotification',
                'verbose_name_plural': 'CarbureNotifications',
                'db_table': 'carbure_notifications',
            },
        ),
        migrations.CreateModel(
            name='CarbureStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carbure_id', models.CharField(default='', max_length=64)),
                ('remaining_volume', models.FloatField(default=0.0)),
                ('remaining_weight', models.FloatField(default=0.0)),
                ('remaining_lhv_amount', models.FloatField(default=0.0)),
                ('unknown_production_site', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('unknown_supplier', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('ghg_reduction', models.FloatField(default=0.0)),
                ('ghg_reduction_red_ii', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'CarbureStock',
                'verbose_name_plural': 'CarbureStocks',
                'db_table': 'carbure_stock',
            },
        ),
        migrations.CreateModel(
            name='CarbureStockEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('CREATED', 'CREATED'), ('UPDATED', 'UPDATED'), ('SPLIT', 'SPLIT'), ('UNSPLIT', 'UNSPLIT'), ('FLUSHED', 'FLUSHED'), ('TRANSFORMED', 'TRANSFORMED'), ('UNTRANSFORMED', 'UNTRANSFORMED')], max_length=32)),
                ('event_dt', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'CarbureStockEvent',
                'verbose_name_plural': 'CarbureStockEvents',
                'db_table': 'carbure_stock_events',
            },
        ),
        migrations.CreateModel(
            name='CarbureStockTransformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transformation_type', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('ETH_ETBE', 'ETH_ETBE')], default='UNKNOWN', max_length=32)),
                ('volume_deducted_from_source', models.FloatField(default=0.0)),
                ('volume_destination', models.FloatField(default=0.0)),
                ('metadata', models.JSONField()),
                ('transformation_dt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'CarbureStockTransformation',
                'verbose_name_plural': 'CarbureStockTransformation',
                'db_table': 'carbure_stock_transformations',
            },
        ),
        migrations.CreateModel(
            name='Depot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('city', models.CharField(blank=True, max_length=128, null=True)),
                ('depot_id', models.CharField(max_length=32)),
                ('depot_type', models.CharField(choices=[('EFS', 'EFS'), ('EFPE', 'EFPE'), ('OIL DEPOT', 'OIL DEPOT'), ('BIOFUEL DEPOT', 'BIOFUEL DEPOT'), ('OTHER', 'Autre')], default='OTHER', max_length=32)),
                ('address', models.CharField(blank=True, max_length=128)),
                ('postal_code', models.CharField(blank=True, max_length=32)),
                ('gps_coordinates', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('accise', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('private', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Dépôt',
                'verbose_name_plural': 'Dépôts',
                'db_table': 'depots',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('entity_type', models.CharField(choices=[('Producteur', 'Producteur'), ('Opérateur', 'Opérateur'), ('Administration', 'Administration'), ('Trader', 'Trader'), ('Auditor', 'Auditeur'), ('Administration Externe', 'Administration Externe'), ('Unknown', 'Unknown')], default='Unknown', max_length=64)),
                ('has_mac', models.BooleanField(default=False)),
                ('has_trading', models.BooleanField(default=False)),
                ('has_stocks', models.BooleanField(default=False)),
                ('has_direct_deliveries', models.BooleanField(default=False)),
                ('legal_name', models.CharField(blank=True, default='', max_length=128)),
                ('registration_id', models.CharField(blank=True, default='', max_length=64)),
                ('sustainability_officer_phone_number', models.CharField(blank=True, default='', max_length=32)),
                ('sustainability_officer', models.CharField(blank=True, default='', max_length=256)),
                ('registered_address', models.TextField(blank=True, default='')),
                ('hash', models.CharField(blank=True, default='', max_length=32, null=True)),
                ('default_certificate', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('notifications_enabled', models.BooleanField(default=False)),
                ('preferred_unit', models.CharField(choices=[('l', 'litres'), ('kg', 'kg'), ('MJ', 'MJ')], default='l', max_length=64)),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'db_table': 'entities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EntityCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_been_updated', models.BooleanField(default=False)),
                ('checked_by_admin', models.BooleanField(default=False)),
                ('rejected_by_admin', models.BooleanField(default=False)),
                ('added_dt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'CarbureEntityCertificates',
                'verbose_name_plural': 'CarbureEntityCertificates',
                'db_table': 'carbure_entity_certificates',
            },
        ),
        migrations.CreateModel(
            name='EntityDepot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ownership_type', models.CharField(choices=[('OWN', 'Propre'), ('THIRD_PARTY', 'Tiers'), ('PROCESSING', 'Processing')], default='THIRD_PARTY', max_length=32)),
                ('blending_is_outsourced', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Dépôt Entité',
                'verbose_name_plural': 'Dépôts Entité',
                'db_table': 'entity_depot',
            },
        ),
        migrations.CreateModel(
            name='ExternalAdminRights',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('right', models.CharField(choices=[('DCA', 'DCA'), ('AGRIMER', 'AGRIMER'), ('TIRIB', 'TIRIB')], default='', max_length=32)),
            ],
            options={
                'verbose_name': 'External Admin Right',
                'verbose_name_plural': 'External Admin Rights',
                'db_table': 'ext_admin_rights',
            },
        ),
        migrations.CreateModel(
            name='GenericCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.CharField(max_length=64)),
                ('certificate_type', models.CharField(choices=[('SYSTEME_NATIONAL', 'SYSTEME_NATIONAL'), ('ISCC', 'ISCC'), ('REDCERT', 'REDCERT'), ('2BS', '2BS')], max_length=32)),
                ('certificate_holder', models.CharField(max_length=512)),
                ('certificate_issuer', models.CharField(blank=True, max_length=256, null=True)),
                ('address', models.CharField(blank=True, max_length=512, null=True)),
                ('valid_from', models.DateField()),
                ('valid_until', models.DateField()),
                ('download_link', models.CharField(default=None, max_length=512, null=True)),
                ('scope', models.JSONField(null=True)),
                ('input', models.JSONField(null=True)),
                ('output', models.JSONField(null=True)),
            ],
            options={
                'verbose_name': 'CarbureCertificates',
                'verbose_name_plural': 'CarbureCertificates',
                'db_table': 'carbure_certificates',
            },
        ),
        migrations.CreateModel(
            name='MatierePremiere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('name_en', models.CharField(max_length=128)),
                ('description', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
                ('code', models.CharField(max_length=64, unique=True)),
                ('compatible_alcool', models.BooleanField(default=False)),
                ('compatible_graisse', models.BooleanField(default=False)),
                ('is_double_compte', models.BooleanField(default=False)),
                ('is_huile_vegetale', models.BooleanField(default=False)),
                ('is_displayed', models.BooleanField(default=True)),
                ('category', models.CharField(choices=[('CONV', 'Conventionnel'), ('ANN-IX-A', 'ANNEXE IX-A'), ('ANN-IX-B', 'ANNEXE IX-B'), ('TALLOL', 'Tallol'), ('OTHER', 'Autre')], default='CONV', max_length=32)),
                ('dgddi_category', models.CharField(blank=True, default=None, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'Matiere Premiere',
                'verbose_name_plural': 'Matieres Premieres',
                'db_table': 'matieres_premieres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_pays', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=128)),
                ('name_en', models.CharField(max_length=128)),
                ('date_added', models.DateField(default=django.utils.timezone.now)),
                ('is_in_europe', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Pays',
                'verbose_name_plural': 'Pays',
                'db_table': 'pays',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TransactionDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_point', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('delivery_point', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('distance', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Distance',
                'verbose_name_plural': 'Distances',
                'db_table': 'transaction_distances',
            },
        ),
        migrations.CreateModel(
            name='UserRightsRequests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_requested', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente de validation'), ('ACCEPTED', 'Accepté'), ('REJECTED', 'Refusé'), ('REVOKED', 'Révoqué')], default='PENDING', max_length=32)),
                ('comment', models.TextField(blank=True, null=True)),
                ('role', models.CharField(choices=[('RO', 'Lecture Seule'), ('RW', 'Lecture/Écriture'), ('ADMIN', 'Administrateur'), ('AUDITOR', 'Auditeur')], default='RO', max_length=32)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Right Request',
                'verbose_name_plural': 'Users Rights Requests',
                'db_table': 'users_rights_requests',
            },
        ),
        migrations.CreateModel(
            name='UserRights',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('RO', 'Lecture Seule'), ('RW', 'Lecture/Écriture'), ('ADMIN', 'Administrateur'), ('AUDITOR', 'Auditeur')], default='RO', max_length=32)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Right',
                'verbose_name_plural': 'Users Rights',
                'db_table': 'users_rights',
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'users_preferences',
            },
        ),
        migrations.CreateModel(
            name='SustainabilityDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declared', models.BooleanField(default=False)),
                ('checked', models.BooleanField(default=False)),
                ('deadline', models.DateField(blank=True, default=datetime.datetime.now)),
                ('period', models.DateField(blank=True, default=datetime.datetime.now)),
                ('reminder_count', models.IntegerField(default=0)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
            ],
            options={
                'verbose_name': ' Déclaration de Durabilité',
                'verbose_name_plural': ' Déclarations de Durabilité',
                'db_table': 'declarations',
            },
        ),
        migrations.CreateModel(
            name='GenericError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error', models.CharField(max_length=256)),
                ('display_to_creator', models.BooleanField(default=False)),
                ('display_to_recipient', models.BooleanField(default=False)),
                ('display_to_admin', models.BooleanField(default=False)),
                ('display_to_auditor', models.BooleanField(default=False)),
                ('acked_by_creator', models.BooleanField(default=False)),
                ('acked_by_recipient', models.BooleanField(default=False)),
                ('acked_by_admin', models.BooleanField(default=False)),
                ('acked_by_auditor', models.BooleanField(default=False)),
                ('highlighted_by_admin', models.BooleanField(default=False)),
                ('highlighted_by_auditor', models.BooleanField(default=False)),
                ('is_blocking', models.BooleanField(default=False)),
                ('field', models.CharField(blank=True, max_length=64, null=True)),
                ('fields', models.JSONField(blank=True, null=True)),
                ('value', models.CharField(blank=True, max_length=128, null=True)),
                ('extra', models.CharField(blank=True, max_length=256, null=True)),
                ('lot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.carburelot')),
            ],
            options={
                'verbose_name': 'Generic Error',
                'verbose_name_plural': 'Generic Errors',
                'db_table': 'generic_errors',
            },
        ),
        migrations.AddIndex(
            model_name='genericcertificate',
            index=models.Index(fields=['certificate_type'], name='carbure_cer_certifi_e5a0bd_idx'),
        ),
        migrations.AddField(
            model_name='externaladminrights',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='entitydepot',
            name='blender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blender', to='core.entity'),
        ),
        migrations.AddField(
            model_name='entitydepot',
            name='depot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.depot'),
        ),
        migrations.AddField(
            model_name='entitydepot',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='certificate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.genericcertificate'),
        ),
        migrations.AddField(
            model_name='entitycertificate',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='parent_entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.entity'),
        ),
        migrations.AddField(
            model_name='depot',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pays'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='dest_stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dest_stock', to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.entity'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='source_stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_stock', to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestocktransformation',
            name='transformed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburestockevent',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.carburestock'),
        ),
        migrations.AddField(
            model_name='carburestockevent',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='biofuel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.biocarburant'),
        ),
        migrations.AddField(
            model_name='carburestock',
            name='carbure_client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_carbure_client', to='core.entity'),
        ),
    ]
