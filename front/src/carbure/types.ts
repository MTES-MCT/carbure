import {
  EntityTypeEnum as EntityType,
  SiteTypeEnum as SiteType,
  GesOptionEnum as GESOption,
  PreferredUnitEnum as Unit,
  UserRightsRequestsStatusEnum as UserRightStatus,
  RoleEnum as UserRole,
  ExtAdminPagesEnum as ExternalAdminPages,
} from "api-schema"
import { apiTypes } from "common/services/api-fetch.types"

export type Entity = apiTypes["UserEntity"]
// export interface Entity {
//   id: number
//   name: string
//   entity_type: EntityType
//   legal_name: string
//   registration_id: string
//   sustainability_officer_phone_number: string
//   sustainability_officer_email: string
//   sustainability_officer: string
//   registered_address: string
//   registered_city: string
//   registered_zipcode: string
//   registered_country: Country
//   has_mac: boolean
//   has_trading: boolean
//   has_stocks: boolean
//   has_direct_deliveries: boolean
//   preferred_unit: Unit
//   default_certificate: string
//   ext_admin_pages: apiTypes[]
//   has_saf: boolean
//   has_elec: boolean
//   activity_description: string
//   website: string
//   vat_number: string
//   is_enabled: boolean
// }

export type EntityPreview = apiTypes["EntityPreview"]

export type User = apiTypes["UserSettingsResponseSeriaizer"]

export type UserRight = apiTypes["UserRights"]
export type UserRightRequest = apiTypes["UserRightsRequests"]

export interface Notification {
  id: number
  dest: Entity
  datetime: string
  type: NotificationType
  acked: boolean
  send_by_email: boolean
  email_sent: boolean
  meta: null | any
}

export type Feedstock = apiTypes["FeedStock"]

export type Biofuel = apiTypes["Biofuel"]

export type Country = apiTypes["Country"]

export type ProductionSite = apiTypes["ProductionSite"]

export type ProductionSiteDetails = ProductionSite & {
  inputs: Feedstock[]
  outputs: Biofuel[]
  certificates: Certificate[]
}

export type Depot = apiTypes["Depot"]

export interface EntityDepot {
  depot: Depot | null
  ownership_type: OwnershipType
  blending_is_outsourced: boolean
  blender: Entity | null
}

export type Certificate = apiTypes["GenericCertificate"]

export interface EntityCertificate {
  id: number
  certificate: Certificate
  entity: Entity
  has_been_updated: boolean
  checked_by_admin: boolean
  rejected_by_admin: boolean
}

export interface UploadCheckError {
  line: number
  error: string
  meta?: null | any
}

export interface UploadCheckReportInfo {
  errors?: UploadCheckError[]
  file_name: string
  error_count: number
}

// export type ExternalAdminPages = `${apiTypes["ExtAdminPagesEnum"]}`

export enum NotificationType {
  CorrectionRequest = "CORRECTION_REQUEST",
  CorrectionDone = "CORRECTION_DONE",
  LotsRejected = "LOTS_REJECTED",
  LotsReceived = "LOTS_RECEIVED",
  LotsRecalled = "LOTS_RECALLED",
  CertificateExpired = "CERTIFICATE_EXPIRED",
  CertificateRejected = "CERTIFICATE_REJECTED",

  DeclarationValidated = "DECLARATION_VALIDATED",
  DeclarationCancelled = "DECLARATION_CANCELLED",
  DeclarationReminder = "DECLARATION_REMINDER",

  MeterReadingsApplicationStarted = "METER_READINGS_APP_STARTED",
  MeterReadingsApplicationEndingSoon = "METER_READINGS_APP_ENDING_SOON",

  SafTicketReceived = "SAF_TICKET_RECEIVED",
  SafTicketAccepted = "SAF_TICKET_ACCEPTED",
  SafTicketRejected = "SAF_TICKET_REJECTED",

  LotsUpdatedByAdmin = "LOTS_UPDATED_BY_ADMIN",
  LotsDeletedByAdmin = "LOTS_DELETED_BY_ADMIN",
}

export enum OwnershipType {
  Own = "OWN",
  ThirdParty = "THIRD_PARTY",
  Processing = "PROCESSING",
}

export type CertificateType = apiTypes["CertificateTypeEnum"]

// Rename EntityTypeEnum generated by openapi-typescript to avoid changing EntityType to EntityTypeEnum
export { EntityType }

export { SiteType }

export { GESOption, Unit }

export { UserRightStatus }

export { UserRole }

export { ExternalAdminPages }
