/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/saf/clients/": {
    get: operations["saf_clients_list"];
  };
  "/api/saf/clients/{id}/": {
    get: operations["saf_clients_retrieve"];
  };
  "/api/saf/snapshot/": {
    get: operations["saf_snapshot_retrieve"];
  };
  "/api/saf/ticket-sources/": {
    get: operations["saf_ticket_sources_list"];
  };
  "/api/saf/ticket-sources/{id}/": {
    get: operations["saf_ticket_sources_retrieve"];
  };
  "/api/saf/ticket-sources/{id}/assign/": {
    post: operations["saf_ticket_sources_assign_create"];
  };
  "/api/saf/ticket-sources/export/": {
    get: operations["saf_ticket_sources_export_retrieve"];
  };
  "/api/saf/ticket-sources/filters/": {
    get: operations["saf_ticket_sources_filters_retrieve"];
  };
  "/api/saf/ticket-sources/group-assign/": {
    post: operations["saf_ticket_sources_group_assign_create"];
  };
  "/api/saf/tickets/": {
    get: operations["saf_tickets_list"];
  };
  "/api/saf/tickets/{id}/": {
    get: operations["saf_tickets_retrieve"];
  };
  "/api/saf/tickets/{id}/accept/": {
    post: operations["saf_tickets_accept_create"];
  };
  "/api/saf/tickets/{id}/cancel/": {
    post: operations["saf_tickets_cancel_create"];
  };
  "/api/saf/tickets/{id}/reject/": {
    post: operations["saf_tickets_reject_create"];
  };
  "/api/saf/tickets/export/": {
    get: operations["saf_tickets_export_retrieve"];
  };
  "/api/saf/tickets/filters/": {
    get: operations["saf_tickets_filters_retrieve"];
  };
  "/api/saf/years/": {
    get: operations["saf_years_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Biofuel: {
      name: string;
      name_en: string;
      code: string;
    };
    CarbureLotPublic: {
      id: number;
      year: number;
      period: number;
      carbure_id?: string;
      carbure_producer: components["schemas"]["EntitySummary"];
      unknown_producer?: string | null;
      carbure_production_site: components["schemas"]["ProductionSite"];
      unknown_production_site?: string | null;
      production_country: components["schemas"]["Country"];
      /** Format: date */
      production_site_commissioning_date?: string | null;
      production_site_certificate?: string | null;
      production_site_double_counting_certificate?: string | null;
      carbure_supplier: components["schemas"]["EntitySummary"];
      unknown_supplier?: string | null;
      supplier_certificate?: string | null;
      supplier_certificate_type?: string | null;
      transport_document_type?: components["schemas"]["TransportDocumentTypeEnum"];
      transport_document_reference?: string | null;
      carbure_client: components["schemas"]["EntitySummary"];
      unknown_client?: string | null;
      /** Format: date */
      dispatch_date?: string | null;
      carbure_dispatch_site: components["schemas"]["Depot"];
      unknown_dispatch_site?: string | null;
      dispatch_site_country: components["schemas"]["Country"];
      /** Format: date */
      delivery_date?: string | null;
      carbure_delivery_site: components["schemas"]["Depot"];
      unknown_delivery_site?: string | null;
      delivery_site_country: components["schemas"]["Country"];
      delivery_type?: components["schemas"]["DeliveryTypeEnum"];
      lot_status?: components["schemas"]["LotStatusEnum"];
      correction_status?: components["schemas"]["CorrectionStatusEnum"];
      /** Format: double */
      volume?: number;
      /** Format: double */
      weight?: number;
      /** Format: double */
      lhv_amount?: number;
      feedstock: components["schemas"]["FeedStock"];
      biofuel: components["schemas"]["Biofuel"];
      country_of_origin: components["schemas"]["Country"];
      /** Format: double */
      eec?: number;
      /** Format: double */
      el?: number;
      /** Format: double */
      ep?: number;
      /** Format: double */
      etd?: number;
      /** Format: double */
      eu?: number;
      /** Format: double */
      esca?: number;
      /** Format: double */
      eccs?: number;
      /** Format: double */
      eccr?: number;
      /** Format: double */
      eee?: number;
      /** Format: double */
      ghg_total?: number;
      /** Format: double */
      ghg_reference?: number;
      /** Format: double */
      ghg_reduction?: number;
      /** Format: double */
      ghg_reference_red_ii?: number;
      /** Format: double */
      ghg_reduction_red_ii?: number;
      free_field?: string | null;
      added_by: components["schemas"]["EntitySummary"];
      /** Format: date-time */
      created_at: string | null;
      carbure_vendor: components["schemas"]["EntitySummary"];
      vendor_certificate?: string | null;
      vendor_certificate_type?: string | null;
      data_reliability_score?: string;
    };
    /**
     * @description * `CONV` - Conventionnel
     * * `ANN-IX-A` - ANNEXE IX-A
     * * `ANN-IX-B` - ANNEXE IX-B
     * * `TALLOL` - Tallol
     * * `OTHER` - Autre
     * @enum {string}
     */
    CategoryEnum: "CONV" | "ANN-IX-A" | "ANN-IX-B" | "TALLOL" | "OTHER";
    Comment: {
      comment?: string;
    };
    /**
     * @description * `NO_PROBLEMO` - NO_PROBLEMO
     * * `IN_CORRECTION` - IN_CORRECTION
     * * `FIXED` - FIXED
     * @enum {string}
     */
    CorrectionStatusEnum: "NO_PROBLEMO" | "IN_CORRECTION" | "FIXED";
    Country: {
      name: string;
      name_en: string;
      code_pays: string;
      is_in_europe?: boolean;
    };
    /**
     * @description * `UNKNOWN` - UNKNOWN
     * * `RFC` - RFC
     * * `STOCK` - STOCK
     * * `BLENDING` - BLENDING
     * * `EXPORT` - EXPORT
     * * `TRADING` - TRADING
     * * `PROCESSING` - PROCESSING
     * * `DIRECT` - DIRECT
     * * `FLUSHED` - FLUSHED
     * * `CONSUMPTION` - CONSUMPTION
     * @enum {string}
     */
    DeliveryTypeEnum: "UNKNOWN" | "RFC" | "STOCK" | "BLENDING" | "EXPORT" | "TRADING" | "PROCESSING" | "DIRECT" | "FLUSHED" | "CONSUMPTION";
    Depot: {
      id: number;
      name: string;
      city?: string | null;
      depot_id: string;
      country: components["schemas"]["Country"];
      depot_type?: components["schemas"]["DepotTypeEnum"];
      address?: string;
      postal_code?: string;
      gps_coordinates?: string | null;
      accise?: string | null;
    };
    /**
     * @description * `OTHER` - Autre
     * * `EFS` - EFS
     * * `EFPE` - EFPE
     * * `OIL DEPOT` - OIL DEPOT
     * * `BIOFUEL DEPOT` - BIOFUEL DEPOT
     * * `HEAT PLANT` - HEAT PLANT
     * * `POWER PLANT` - POWER PLANT
     * * `COGENERATION PLANT` - COGENERATION PLANT
     * @enum {string}
     */
    DepotTypeEnum: "OTHER" | "EFS" | "EFPE" | "OIL DEPOT" | "BIOFUEL DEPOT" | "HEAT PLANT" | "POWER PLANT" | "COGENERATION PLANT";
    Entity: {
      id: number;
      name: string;
      entity_type?: components["schemas"]["EntityTypeEnum"];
      has_mac?: boolean;
      has_trading?: boolean;
      has_direct_deliveries?: boolean;
      has_stocks?: boolean;
      preferred_unit?: components["schemas"]["PreferredUnitEnum"];
      legal_name?: string;
      registration_id?: string;
      sustainability_officer_phone_number?: string;
      sustainability_officer?: string;
      registered_address?: string;
      registered_zipcode?: string;
      registered_city?: string;
      registered_country?: number | null;
      activity_description?: string;
      /** Format: uri */
      website?: string;
      vat_number?: string;
    };
    EntityPreview: {
      id: number;
      name: string;
      entity_type?: components["schemas"]["EntityTypeEnum"];
    };
    EntitySummary: {
      id: number;
      name: string;
      entity_type?: components["schemas"]["EntityTypeEnum"];
    };
    /**
     * @description * `Producteur` - Producteur
     * * `Opérateur` - Opérateur
     * * `Administration` - Administration
     * * `Trader` - Trader
     * * `Auditor` - Auditeur
     * * `Administration Externe` - Administration Externe
     * * `Charge Point Operator` - Charge Point Operator
     * * `Compagnie aérienne` - Compagnie aérienne
     * * `Unknown` - Unknown
     * * `Power or Heat Producer` - Producteur d'électricité ou de chaleur
     * @enum {string}
     */
    EntityTypeEnum: "Producteur" | "Opérateur" | "Administration" | "Trader" | "Auditor" | "Administration Externe" | "Charge Point Operator" | "Compagnie aérienne" | "Unknown" | "Power or Heat Producer";
    ErrorResponse: {
      message: string;
    };
    FeedStock: {
      name: string;
      name_en: string;
      code: string;
      category?: components["schemas"]["CategoryEnum"];
      is_double_compte?: boolean;
    };
    /**
     * @description * `Default` - Valeurs par défaut
     * * `Actual` - Valeurs réelles
     * * `NUTS2` - Valeurs NUTS2
     * @enum {string}
     */
    GesOptionEnum: "Default" | "Actual" | "NUTS2";
    /**
     * @description * `DRAFT` - DRAFT
     * * `PENDING` - PENDING
     * * `ACCEPTED` - ACCEPTED
     * * `REJECTED` - REJECTED
     * * `FROZEN` - FROZEN
     * * `DELETED` - DELETED
     * @enum {string}
     */
    LotStatusEnum: "DRAFT" | "PENDING" | "ACCEPTED" | "REJECTED" | "FROZEN" | "DELETED";
    /**
     * @description * `l` - litres
     * * `kg` - kg
     * * `MJ` - MJ
     * @enum {string}
     */
    PreferredUnitEnum: "l" | "kg" | "MJ";
    ProductionSite: {
      id: number;
      producer: components["schemas"]["Entity"];
      name: string;
      country: components["schemas"]["Country"];
      /** Format: date */
      date_mise_en_service: string;
      ges_option?: components["schemas"]["GesOptionEnum"];
      eligible_dc?: boolean;
      dc_reference?: string | null;
      site_id?: string;
      address?: string;
      city?: string;
      postal_code?: string;
      gps_coordinates?: string | null;
      manager_name?: string;
      manager_phone?: string;
      manager_email?: string;
    };
    SafClient: {
      id: number;
      entity_type?: components["schemas"]["EntityTypeEnum"];
      name: string;
    };
    SafTicket: {
      id: number;
      carbure_id?: string | null;
      year: number;
      assignment_period: number;
      status?: components["schemas"]["StatusEnum"];
      /** Format: date */
      agreement_date?: string | null;
      supplier: string;
      client: string;
      /** Format: double */
      volume: number;
      feedstock: components["schemas"]["FeedStock"];
      biofuel: components["schemas"]["Biofuel"];
      country_of_origin: components["schemas"]["Country"];
      /** Format: double */
      ghg_reduction?: number;
    };
    SafTicketDetails: {
      id: number;
      carbure_id?: string | null;
      year: number;
      assignment_period: number;
      status?: components["schemas"]["StatusEnum"];
      /** Format: date-time */
      created_at: string | null;
      supplier: string;
      client: string;
      free_field?: string | null;
      /** Format: date */
      agreement_date?: string | null;
      agreement_reference?: string | null;
      /** Format: double */
      volume: number;
      feedstock: components["schemas"]["FeedStock"];
      biofuel: components["schemas"]["Biofuel"];
      country_of_origin: components["schemas"]["Country"];
      carbure_producer: components["schemas"]["EntityPreview"];
      unknown_producer?: string | null;
      carbure_production_site: components["schemas"]["ProductionSite"];
      unknown_production_site?: string | null;
      /** Format: date */
      production_site_commissioning_date?: string | null;
      /** Format: double */
      eec?: number;
      /** Format: double */
      el?: number;
      /** Format: double */
      ep?: number;
      /** Format: double */
      etd?: number;
      /** Format: double */
      eu?: number;
      /** Format: double */
      esca?: number;
      /** Format: double */
      eccs?: number;
      /** Format: double */
      eccr?: number;
      /** Format: double */
      eee?: number;
      /** Format: double */
      ghg_reduction?: number;
      /** Format: double */
      ghg_total?: number;
      client_comment?: string | null;
      parent_ticket_source: components["schemas"]["SafTicketSourcePreview"];
    };
    SafTicketSource: {
      id: number;
      carbure_id?: string | null;
      year: number;
      delivery_period: number;
      /** Format: date-time */
      created_at: string | null;
      /** Format: double */
      total_volume: number;
      /** Format: double */
      assigned_volume: number;
      feedstock: components["schemas"]["FeedStock"];
      biofuel: components["schemas"]["Biofuel"];
      country_of_origin: components["schemas"]["Country"];
      /** Format: double */
      ghg_reduction?: number;
      assigned_tickets: string;
      parent_lot: components["schemas"]["SafTicketSourceParentLot"];
    };
    SafTicketSourceAssignment: {
      client_id: number;
      /** Format: double */
      volume: number;
      agreement_reference: string;
      agreement_date: string;
      free_field?: string | null;
      assignment_period: number;
    };
    SafTicketSourceDetails: {
      id: number;
      carbure_id?: string | null;
      year: number;
      delivery_period: number;
      /** Format: date-time */
      created_at: string | null;
      added_by: components["schemas"]["EntityPreview"];
      /** Format: double */
      total_volume: number;
      /** Format: double */
      assigned_volume: number;
      feedstock: components["schemas"]["FeedStock"];
      biofuel: components["schemas"]["Biofuel"];
      country_of_origin: components["schemas"]["Country"];
      assigned_tickets: string;
      carbure_producer: components["schemas"]["EntityPreview"];
      unknown_producer?: string | null;
      carbure_production_site: components["schemas"]["ProductionSite"];
      unknown_production_site?: string | null;
      /** Format: date */
      production_site_commissioning_date?: string | null;
      /** Format: double */
      eec?: number;
      /** Format: double */
      el?: number;
      /** Format: double */
      ep?: number;
      /** Format: double */
      etd?: number;
      /** Format: double */
      eu?: number;
      /** Format: double */
      esca?: number;
      /** Format: double */
      eccs?: number;
      /** Format: double */
      eccr?: number;
      /** Format: double */
      eee?: number;
      /** Format: double */
      ghg_reduction?: number;
      /** Format: double */
      ghg_total?: number;
      parent_lot: components["schemas"]["CarbureLotPublic"];
    };
    SafTicketSourceGroupAssignment: {
      client_id: number;
      /** Format: double */
      volume: number;
      agreement_reference: string;
      agreement_date: string;
      free_field?: string | null;
      assignment_period: number;
      ticket_sources_ids: number[];
    };
    SafTicketSourceParentLot: {
      id: number;
      carbure_id?: string;
    };
    SafTicketSourcePreview: {
      id: number;
      carbure_id?: string | null;
      /** Format: double */
      total_volume: number;
      /** Format: double */
      assigned_volume: number;
    };
    /**
     * @description * `PENDING` - En attente
     * * `ACCEPTED` - Accepté
     * * `REJECTED` - Refusé
     * @enum {string}
     */
    StatusEnum: "PENDING" | "ACCEPTED" | "REJECTED";
    /**
     * @description * `DAU` - DAU
     * * `DAE` - DAE
     * * `DSA` - DSA
     * * `DSAC` - DSAC
     * * `DSP` - DSP
     * * `OTHER` - OTHER
     * @enum {string}
     */
    TransportDocumentTypeEnum: "DAU" | "DAE" | "DSA" | "DSAC" | "DSP" | "OTHER";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  saf_clients_list: {
    parameters: {
      query?: {
        entity_id?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafClient"][];
        };
      };
    };
  };
  saf_clients_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Entity. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafClient"];
        };
      };
    };
  };
  saf_snapshot_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
        /** @description Year */
        year: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  saf_ticket_sources_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         */
        order?: ("-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicketSource"][];
        };
      };
    };
  };
  saf_ticket_sources_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicketSourceDetails"];
        };
      };
    };
  };
  saf_ticket_sources_assign_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceAssignment"];
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceAssignment"];
        "multipart/form-data": components["schemas"]["SafTicketSourceAssignment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicketSourceAssignment"];
        };
      };
    };
  };
  saf_ticket_sources_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         */
        order?: ("-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.ms-excel": string;
        };
      };
    };
  };
  saf_ticket_sources_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         */
        order?: ("-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicketSource"];
        };
      };
    };
  };
  saf_ticket_sources_group_assign_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceGroupAssignment"];
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceGroupAssignment"];
        "multipart/form-data": components["schemas"]["SafTicketSourceGroupAssignment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  saf_tickets_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `client` - Client
         * * `-client` - Client (décroissant)
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         * * `created_at` - Created at
         * * `-created_at` - Created at (décroissant)
         */
        order?: ("-client" | "-created_at" | "-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "client" | "created_at" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicket"][];
        };
      };
    };
  };
  saf_tickets_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicketDetails"];
        };
      };
    };
  };
  saf_tickets_accept_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"];
        "application/x-www-form-urlencoded": components["schemas"]["Comment"];
        "multipart/form-data": components["schemas"]["Comment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  saf_tickets_cancel_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"];
        "application/x-www-form-urlencoded": components["schemas"]["Comment"];
        "multipart/form-data": components["schemas"]["Comment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  saf_tickets_reject_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"];
        "application/x-www-form-urlencoded": components["schemas"]["Comment"];
        "multipart/form-data": components["schemas"]["Comment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  saf_tickets_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `client` - Client
         * * `-client` - Client (décroissant)
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         * * `created_at` - Created at
         * * `-created_at` - Created at (décroissant)
         */
        order?: ("-client" | "-created_at" | "-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "client" | "created_at" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.ms-excel": string;
        };
      };
    };
  };
  saf_tickets_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[];
        entity_id: number;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[];
        /**
         * @description Ordre
         *
         * * `client` - Client
         * * `-client` - Client (décroissant)
         * * `volume` - Volume
         * * `-volume` - Volume (décroissant)
         * * `period` - Period
         * * `-period` - Period (décroissant)
         * * `feedstock` - Feedstock
         * * `-feedstock` - Feedstock (décroissant)
         * * `ghg_reduction` - Ghg reduction
         * * `-ghg_reduction` - Ghg reduction (décroissant)
         * * `created_at` - Created at
         * * `-created_at` - Created at (décroissant)
         */
        order?: ("-client" | "-created_at" | "-feedstock" | "-ghg_reduction" | "-period" | "-volume" | "client" | "created_at" | "feedstock" | "ghg_reduction" | "period" | "volume")[];
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[];
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[];
        /** @description A search term. */
        search?: string;
        status?: string;
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[];
        year?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SafTicket"];
        };
      };
    };
  };
  saf_years_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
