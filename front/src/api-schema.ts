/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/apikey/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["apikey_list"]
    put?: never
    post: operations["apikey_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/apikey/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["apikey_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/apikey/{id}/revoke/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["apikey_revoke_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/activate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_activate_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/login/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_login_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/logout/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["auth_logout_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/register/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_register_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/request-activation-link/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_request_activation_link_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/request-otp/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["auth_request_otp_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/request-password-reset/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_request_password_reset_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/reset-password/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_reset_password_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/verify-otp/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_verify_otp_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/agreements/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_agreements_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/agreements/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_agreements_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/agreements/agreement-admin/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_agreements_agreement_admin_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/agreements/agreement-public/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_agreements_agreement_public_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/agreements/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_agreements_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_applications_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/{id}/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_applications_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/{id}/update-approved-quotas/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_update_approved_quotas_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/add/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_add_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/approve/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_approve_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/check-admin-files/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_check_admin_files_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/check-file/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_check_file_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/export-application/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_applications_export_application_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/list-admin/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_applications_list_admin_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/applications/reject/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["double_counting_applications_reject_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/double-counting/snapshot/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["double_counting_snapshot_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/entities/{id}/enable/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["entities_enable_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/biofuels": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_biofuels_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/certificates": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_certificates_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/countries": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_countries_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/depots": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_depots_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/entities": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_entities_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/feedstocks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_feedstocks_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/production-sites": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_production_sites_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/clients/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_clients_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/clients/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_clients_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/snapshot/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_snapshot_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/{id}/assign/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_ticket_sources_assign_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/group-assign/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_ticket_sources_group_assign_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/accept/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_accept_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/cancel/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_cancel_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/credit-source/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_credit_source_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/reject/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_reject_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/years/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_years_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["user_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/request-access": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["user_request_access_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/revoke-access": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["user_revoke_access_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/{id}/duplicate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_duplicate_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/{id}/toggle-warning/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_toggle_warning_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/{id}/update-lot/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_update_lot_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-blending/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_blending_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-consumption/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_consumption_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-direct-delivery/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_direct_delivery_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_export_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-in-stock/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_in_stock_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-processing/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_processing_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-rfc/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_rfc_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/accept-trading/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_accept_trading_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/add/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_add_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/add-comment/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_add_comment_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/add-excel/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_add_excel_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/admin-declarations/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_admin_declarations_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/approve-fix/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_approve_fix_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/bulk-create/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_bulk_create_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/cancel-accept/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_cancel_accept_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/declarations/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_declarations_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/declarations-invalidate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_declarations_invalidate_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/declarations-validate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_declarations_validate_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/delete/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_delete_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/delete-many/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_delete_many_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/map/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_map_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/mark-conform/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_mark_conform_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/mark-non-conform/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_mark_non_conform_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/reject/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_reject_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/request-fix/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_request_fix_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/send/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_send_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/submit-fix/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_submit_fix_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/summary/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_summary_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/template/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_lots_template_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/toggle-pin/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_toggle_pin_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/lots/update-many/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_lots_update_many_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/snapshot": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_snapshot_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_stocks_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_stocks_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/cancel-transformation/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_stocks_cancel_transformation_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_stocks_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/flush/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_stocks_flush_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/split/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_stocks_split_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/summary/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_stocks_summary_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/template/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_stocks_template_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/stocks/transform/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["v2_transactions_stocks_transform_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/transactions/years": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["v2_transactions_years_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    APIKey: {
      name?: string | null
    }
    APIKeyList: {
      readonly id: number
      name?: string | null
      key: string
      /** Format: date-time */
      readonly created_at: string
      revoked?: boolean
      /** Format: date-time */
      last_used?: string | null
      /** Format: int64 */
      usage_count?: number
    }
    APIKeyRequest: {
      name?: string | null
    }
    AcceptBlendingRequest: {
      selection: number[]
    }
    AcceptConsumptionRequest: {
      selection: number[]
    }
    AcceptDirectDeliveryRequest: {
      selection: number[]
    }
    AcceptExportRequest: {
      selection: number[]
    }
    AcceptProcessingRequest: {
      selection: number[]
      processing_entity_id: number
    }
    AcceptRFCRequest: {
      selection: number[]
    }
    AcceptStockRequest: {
      selection: number[]
    }
    AcceptTradingRequest: {
      selection: number[]
      client_entity_id?: string
      unknown_client?: string
      certificate?: string
    }
    ActivateAccountRequest: {
      uidb64: string
      token: string
      invite?: number
    }
    ActivateResponse: {
      message: string
      token?: string
    }
    AddCommentRequest: {
      comment: string
      /** @default false */
      is_visible_by_admin: boolean
      /** @default false */
      is_visible_by_auditor: boolean
      selection: number[]
    }
    AddExcelRequest: {
      /** Format: binary */
      file: string
    }
    AdminSnapshotReponse: {
      alerts: number
      lots: number
      stocks: number
    }
    AgreementLists: {
      active: components["schemas"]["DoubleCountingRegistration"][]
      incoming: components["schemas"]["DoubleCountingRegistration"][]
      expired: components["schemas"]["DoubleCountingRegistration"][]
    }
    ApplicationListe: {
      rejected: components["schemas"]["DoubleCountingApplicationPartial"][]
      pending: components["schemas"]["DoubleCountingApplicationPartial"][]
    }
    ApplicationSnapshot: {
      applications_pending: number
      applications_rejected: number
      agreements_incoming: number
      agreements_active: number
      agreements_expired: number
    }
    ApprouveDoubleCountingRequest: {
      dca_id: number
    }
    ApproveFixRequest: {
      lot_ids: number[]
    }
    Biofuel: {
      name: string
      name_en: string
      code: string
    }
    BulkCreateResponse: {
      lots: number
      valid: number
      invalid: number
      errors: components["schemas"]["EmbeddedGenericError"][]
    }
    CancelAcceptRequest: {
      lot_ids: number[]
    }
    CarbureLotComment: {
      readonly entity: components["schemas"]["Entity"]
      user?: number | null
      comment_type?: components["schemas"]["CommentTypeEnum"]
      /** Format: date-time */
      readonly comment_dt: string
      comment: string
    }
    CarbureLotEvent: {
      readonly user: string
      event_type: components["schemas"]["EventTypeEnum"]
      /** Format: date-time */
      readonly event_dt: string
      metadata?: unknown
    }
    CarbureLotPublic: {
      readonly id: number
      year: number
      period: number
      carbure_id?: string
      readonly carbure_producer: components["schemas"]["EntitySummary"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      readonly production_country: components["schemas"]["Country"]
      /** Format: date */
      production_site_commissioning_date?: string | null
      production_site_certificate?: string | null
      production_site_double_counting_certificate?: string | null
      readonly carbure_supplier: components["schemas"]["EntitySummary"]
      unknown_supplier?: string | null
      supplier_certificate?: string | null
      supplier_certificate_type?: string | null
      transport_document_type?: components["schemas"]["TransportDocumentTypeEnum"]
      transport_document_reference?: string | null
      readonly carbure_client: components["schemas"]["EntitySummary"]
      unknown_client?: string | null
      /** Format: date */
      dispatch_date?: string | null
      readonly carbure_dispatch_site: components["schemas"]["Depot"]
      unknown_dispatch_site?: string | null
      readonly dispatch_site_country: components["schemas"]["Country"]
      /** Format: date */
      delivery_date?: string | null
      readonly carbure_delivery_site: components["schemas"]["Depot"]
      unknown_delivery_site?: string | null
      readonly delivery_site_country: components["schemas"]["Country"]
      delivery_type?: components["schemas"]["DeliveryTypeEnum"]
      lot_status?: components["schemas"]["LotStatusEnum"]
      correction_status?: components["schemas"]["CorrectionStatusEnum"]
      /** Format: double */
      volume?: number
      /** Format: double */
      weight?: number
      /** Format: double */
      lhv_amount?: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_total?: number
      /** Format: double */
      ghg_reference?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_reference_red_ii?: number
      /** Format: double */
      ghg_reduction_red_ii?: number
      free_field?: string | null
      readonly added_by: components["schemas"]["EntitySummary"]
      /** Format: date-time */
      readonly created_at: string | null
      readonly carbure_vendor: components["schemas"]["EntitySummary"]
      vendor_certificate?: string | null
      vendor_certificate_type?: string | null
      data_reliability_score?: string
    }
    CarbureStockPublic: {
      readonly id: number
      carbure_id?: string
      readonly depot: components["schemas"]["Depot"]
      readonly carbure_client: components["schemas"]["Entity"]
      /** Format: double */
      remaining_volume?: number
      /** Format: double */
      remaining_weight?: number
      /** Format: double */
      remaining_lhv_amount?: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      readonly production_country: components["schemas"]["Country"]
      readonly carbure_supplier: components["schemas"]["Entity"]
      unknown_supplier?: string | null
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_reduction_red_ii?: number
      /** Format: double */
      readonly initial_volume: number
      /** Format: date */
      readonly delivery_date: string
      readonly period: number
      /** Format: double */
      readonly initial_weight: number
      /** Format: double */
      readonly initial_lhv_amount: number
    }
    CarbureStockTransformationPublic: {
      transformation_type?: components["schemas"]["TransformationTypeEnum"]
      readonly source_stock: components["schemas"]["CarbureStockPublic"]
      readonly dest_stock: components["schemas"]["CarbureStockPublic"]
      /** Format: double */
      volume_deducted_from_source?: number
      /** Format: double */
      volume_destination?: number
      metadata: unknown
      transformed_by?: number | null
      entity?: number | null
      /** Format: date-time */
      readonly transformation_dt: string
    }
    /**
     * @description * `CONV` - Conventionnel
     *     * `ANN-IX-A` - ANNEXE IX-A
     *     * `ANN-IX-B` - ANNEXE IX-B
     *     * `TALLOL` - Tallol
     *     * `OTHER` - Autre
     * @enum {string}
     */
    CategoryEnum: CategoryEnum
    /**
     * @description * `SYSTEME_NATIONAL` - SYSTEME_NATIONAL
     *     * `ISCC` - ISCC
     *     * `REDCERT` - REDCERT
     *     * `2BS` - 2BS
     * @enum {string}
     */
    CertificateTypeEnum: CertificateTypeEnum
    CheckAdminFileRequest: {
      files: string[]
    }
    CheckFileResponse: {
      file: components["schemas"]["File"]
      /** Format: date-time */
      checked_at: string
    }
    CommentRequest: {
      comment?: string
    }
    /**
     * @description * `REGULAR` - REGULAR
     *     * `AUDITOR` - AUDITOR
     *     * `ADMIN` - ADMIN
     * @enum {string}
     */
    CommentTypeEnum: CommentTypeEnum
    /**
     * @description * `NO_PROBLEMO` - NO_PROBLEMO
     *     * `IN_CORRECTION` - IN_CORRECTION
     *     * `FIXED` - FIXED
     * @enum {string}
     */
    CorrectionStatusEnum: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status
    Count: {
      drafts: number
      output: number
      input: number
      corrections: number
    }
    Country: {
      name: string
      name_en: string
      code_pays: string
      is_in_europe?: boolean
    }
    CreateLotRequest: {
      free_field?: string | null
      carbure_stock_id?: string | null
      /** Format: date */
      delivery_date?: string | null
      biofuel_code?: string | null
      feedstock_code?: string | null
      country_code?: string | null
      production_site_certificate?: string | null
      production_site_certificate_type?: string | null
      carbure_production_site?: string | null
      unknown_producer?: string
      unknown_production_site?: string
      production_country_code?: string | null
      /** Format: date */
      production_site_commissioning_date?: string | null
      production_site_double_counting_certificate?: string | null
      /** Format: double */
      eec?: number | null
      /** Format: double */
      el?: number | null
      /** Format: double */
      ep?: number | null
      /** Format: double */
      etd?: number | null
      /** Format: double */
      eu?: number | null
      /** Format: double */
      esca?: number | null
      /** Format: double */
      eccs?: number | null
      /** Format: double */
      eccr?: number | null
      /** Format: double */
      eee?: number | null
      delivery_type?: string | null
      carbure_client_id?: number | null
      unknown_client?: string
      /** Format: double */
      quantity?: number | null
      unit?: string | null
      /** Format: double */
      volume?: number | null
      /** Format: double */
      weight?: number | null
      /** Format: double */
      lhv_amount?: number | null
      unknown_supplier?: string
      supplier_certificate?: string | null
      transport_document_type?: string | null
      transport_document_reference?: string | null
      carbure_delivery_site_depot_id?: number | null
      unknown_delivery_site?: string
      delivery_site_country_code?: string | null
      vendor_certificate?: string | null
    }
    DeclarationSummary: {
      declaration: components["schemas"]["SustainabilityDeclaration"]
      count: components["schemas"]["Count"]
    }
    DeleteLotsManyRequest: {
      /** @default false */
      dry_run: boolean
      lots_ids: number[]
      comment?: string
    }
    DeleteLotsManyResponse: {
      deletions: components["schemas"]["DeleteManyLotsNodeDiff"][]
      updates: components["schemas"]["DeleteManyLotsNodeDiff"][]
    }
    DeleteLotsNodeDiff: {
      node: {
        [key: string]: unknown
      }
      diff: {
        [key: string]: unknown
      }
    }
    DeleteLotsRequest: {
      /** @default false */
      dry_run: boolean
      selection: number[]
    }
    DeleteLotsResponse: {
      deletions: components["schemas"]["DeleteLotsNodeDiff"][]
      updates: components["schemas"]["DeleteLotsNodeDiff"][]
    }
    DeleteManyLotsNodeDiff: {
      node: {
        [key: string]: unknown
      }
      diff: {
        [key: string]: unknown
      }
    }
    /**
     * @description * `UNKNOWN` - UNKNOWN
     *     * `RFC` - RFC
     *     * `STOCK` - STOCK
     *     * `BLENDING` - BLENDING
     *     * `EXPORT` - EXPORT
     *     * `TRADING` - TRADING
     *     * `PROCESSING` - PROCESSING
     *     * `DIRECT` - DIRECT
     *     * `FLUSHED` - FLUSHED
     *     * `CONSUMPTION` - CONSUMPTION
     * @enum {string}
     */
    DeliveryTypeEnum: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types
    Depot: {
      readonly id: number
      name: string
      city?: string
      customs_id?: string
      readonly country: components["schemas"]["Country"]
      site_type?: components["schemas"]["SiteTypeEnum"]
      address?: string
      postal_code?: string
      gps_coordinates?: string | null
      accise?: string
      /**
       * Format: double
       * @description Entre 0 et 1
       */
      electrical_efficiency?: number | null
      /**
       * Format: double
       * @description Entre 0 et 1
       */
      thermal_efficiency?: number | null
      /**
       * Format: double
       * @description En degrés Celsius
       */
      useful_temperature?: number | null
    }
    DoubleCountingAdminAddRequest: {
      certificate_id?: string
      entity_id: number
      producer_id: number
      production_site_id: number
      /** @default false */
      should_replace: boolean
      /** Format: binary */
      file: string
    }
    /**
     * @description * `ACTIVE` - ACTIVE
     *     * `EXPIRED` - EXPIRED
     *     * `EXPIRES_SOON` - EXPIRES_SOON
     *     * `INCOMING` - INCOMING
     * @enum {string}
     */
    DoubleCountingAgreementStatus: DoubleCountingAgreementStatus
    DoubleCountingApplication: {
      readonly id: number
      /** Format: date-time */
      readonly created_at: string
      readonly producer: components["schemas"]["Entity"]
      /**
       * Adresse électronique
       * Format: email
       */
      readonly producer_user: string
      readonly production_site: components["schemas"]["DoubleCountingProductionSite"]
      /** Format: date */
      period_start: string
      /** Format: date */
      period_end: string
      status?: components["schemas"]["DoubleCountingStatus"]
      readonly sourcing: components["schemas"]["DoubleCountingSourcing"][]
      readonly production: components["schemas"]["DoubleCountingProduction"][]
      readonly documents: components["schemas"]["DoubleCountingDocFile"][]
    }
    DoubleCountingApplicationPartial: {
      readonly id: number
      /** Format: date-time */
      readonly created_at: string
      readonly producer: components["schemas"]["EntitySummary"]
      readonly production_site: components["schemas"]["DoubleCountingProductionSite"]
      /** Format: date */
      period_start: string
      /** Format: date */
      period_end: string
      readonly status: components["schemas"]["DoubleCountingStatus"]
      certificate_id: string
      readonly agreement_id: number
      /** Format: double */
      readonly quotas_progression: number
      /**
       * Adresse électronique
       * Format: email
       */
      readonly producer_user: string
    }
    DoubleCountingDocFile: {
      readonly id: number
      file_name?: string
      file_type?: components["schemas"]["FileTypeEnum"]
    }
    DoubleCountingProduction: {
      readonly id: number
      readonly year: number
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly max_production_capacity: number
      readonly estimated_production: number
      readonly requested_quota: number
      readonly approved_quota: number
    }
    DoubleCountingProductionHistory: {
      readonly id: number
      readonly year: number
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly max_production_capacity: number
      readonly effective_production: number
    }
    DoubleCountingProductionSite: {
      readonly id: number
      readonly producer: components["schemas"]["Entity"]
      name: string
      readonly country: components["schemas"]["Country"]
      /** Format: date */
      date_mise_en_service?: string | null
      ges_option?: components["schemas"]["GesOptionEnum"]
      eligible_dc?: boolean
      dc_reference?: string
      site_siret?: string
      address?: string
      city?: string
      postal_code?: string
      gps_coordinates?: string | null
      manager_name?: string
      manager_phone?: string
      manager_email?: string
      readonly inputs: components["schemas"]["FeedStock"][]
      readonly outputs: components["schemas"]["Biofuel"][]
      readonly certificates: components["schemas"]["ProductionSiteCertificate"][]
    }
    DoubleCountingQuota: {
      approved_quota: number
      biofuel: components["schemas"]["Biofuel"]
      feedstock: components["schemas"]["FeedStock"]
      id: number
      lot_count: number
      production_tonnes: number
      quotas_progression: number
      requested_quota: number
      year: number
    }
    DoubleCountingRegistration: {
      readonly id: number
      certificate_id: string
      /** Format: date */
      valid_from: string
      readonly producer: components["schemas"]["EntitySummary"]
      production_site: components["schemas"]["DoubleCountingProductionSite"]
      /** Format: date */
      valid_until: string
      readonly status: components["schemas"]["DoubleCountingAgreementStatus"]
      /** Format: double */
      readonly quotas_progression: number
    }
    DoubleCountingRegistrationDetails: {
      readonly id: number
      certificate_id: string
      /** Format: date */
      valid_from: string
      /** Format: date */
      valid_until: string
      readonly status: components["schemas"]["DoubleCountingAgreementStatus"]
      readonly producer: string
      readonly production_site: string
      application: components["schemas"]["DoubleCountingApplication"]
      readonly quotas: components["schemas"]["DoubleCountingQuota"][]
    }
    DoubleCountingRegistrationPublic: {
      readonly production_site: components["schemas"]["FieldData"]
      certificate_id: string
      /** Format: date */
      valid_from: string
      /** Format: date */
      valid_until: string
      readonly biofuel_list: string
    }
    DoubleCountingSourcing: {
      readonly id: number
      readonly year: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly origin_country: components["schemas"]["Country"]
      readonly supply_country: components["schemas"]["Country"]
      readonly transit_country: components["schemas"]["Country"]
      readonly metric_tonnes: number
    }
    DoubleCountingSourcingHistory: {
      readonly id: number
      year: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly origin_country: components["schemas"]["Country"]
      readonly supply_country: components["schemas"]["Country"]
      readonly transit_country: components["schemas"]["Country"]
      metric_tonnes: number
      raw_material_supplier?: string
      supplier_certificate_name?: string
      supplier_certificate?: number | null
    }
    /**
     * @description * `PENDING` - PENDING
     *     * `INPROGRESS` - INPROGRESS
     *     * `REJECTED` - REJECTED
     *     * `ACCEPTED` - ACCEPTED
     * @enum {string}
     */
    DoubleCountingStatus: DoubleCountingStatus
    EmbeddedGenericError: {
      index: number
      errors: string[]
    }
    EmptyResponse: {
      empty?: string
    }
    EmptyResponseRequest: {
      empty?: string
    }
    Entity: {
      readonly id: number
      name: string
      entity_type?: components["schemas"]["EntityTypeEnum"]
      has_mac?: boolean
      has_trading?: boolean
      has_direct_deliveries?: boolean
      has_stocks?: boolean
      preferred_unit?: components["schemas"]["PreferredUnitEnum"]
      legal_name?: string
      registration_id?: string
      sustainability_officer_phone_number?: string
      sustainability_officer?: string
      registered_address?: string
      registered_zipcode?: string
      registered_city?: string
      registered_country?: number | null
      activity_description?: string
      /** Format: uri */
      website?: string
      vat_number?: string
    }
    EntityPreview: {
      readonly id: number
      readonly name: string
      readonly entity_type: components["schemas"]["EntityTypeEnum"]
    }
    EntitySummary: {
      readonly id: number
      readonly name: string
      readonly entity_type: components["schemas"]["EntityTypeEnum"]
    }
    /**
     * @description * `Producteur` - Producteur
     *     * `Opérateur` - Opérateur
     *     * `Administration` - Administration
     *     * `Trader` - Trader
     *     * `Auditor` - Auditeur
     *     * `Administration Externe` - Administration Externe
     *     * `Charge Point Operator` - Charge Point Operator
     *     * `Compagnie aérienne` - Compagnie aérienne
     *     * `Unknown` - Unknown
     *     * `Power or Heat Producer` - Producteur d'électricité ou de chaleur
     * @enum {string}
     */
    EntityTypeEnum: EntityTypeEnum
    ErrorResponse: {
      message: string
    }
    /**
     * @description * `CREATED` - CREATED
     *     * `UPDATED` - UPDATED
     *     * `VALIDATED` - VALIDATED
     *     * `FIX_REQUESTED` - FIX_REQUESTED
     *     * `MARKED_AS_FIXED` - MARKED_AS_FIXED
     *     * `FIX_ACCEPTED` - FIX_ACCEPTED
     *     * `ACCEPTED` - ACCEPTED
     *     * `REJECTED` - REJECTED
     *     * `RECALLED` - RECALLED
     *     * `DECLARED` - DECLARED
     *     * `DELETED` - DELETED
     *     * `DECLCANCEL` - DECLCANCEL
     *     * `RESTORED` - RESTORED
     *     * `CANCELLED` - CANCELLED
     *     * `UPDATED_BY_ADMIN` - UPDATED_BY_ADMIN
     *     * `DELETED_BY_ADMIN` - DELETED_BY_ADMIN
     * @enum {string}
     */
    EventTypeEnum: EventTypeEnum
    /**
     * @description * `DCA` - DCA
     *     * `AGRIMER` - AGRIMER
     *     * `TIRIB` - TIRIB
     *     * `AIRLINE` - AIRLINE
     *     * `ELEC` - ELEC
     * @enum {string}
     */
    ExtAdminPagesEnum: ExtAdminPagesEnum
    FeedStock: {
      name: string
      name_en: string
      code: string
      category?: components["schemas"]["CategoryEnum"]
      is_double_compte?: boolean
    }
    FieldData: {
      name: string
      city: string
      address: string
      postal_code: string
      country: string
    }
    File: {
      file_name: string
      errors: components["schemas"]["FileErrors"]
      error_count: number
      start_year: number
      production_site: string
      /** Format: email */
      producer_email: string
      production: components["schemas"]["DoubleCountingProduction"][]
      sourcing: components["schemas"]["DoubleCountingSourcing"][]
      sourcing_history: components["schemas"]["DoubleCountingSourcingHistory"][]
      production_history: components["schemas"]["DoubleCountingProductionHistory"][]
      readonly has_dechets_industriels: boolean
    }
    FileError: {
      error: string
      is_blocking: boolean
      line_number: number
      line_merged: string
      meta: {
        [key: string]: unknown
      }
    }
    FileErrors: {
      sourcing_forecast: components["schemas"]["FileError"][]
      sourcing_history: components["schemas"]["FileError"][]
      production: components["schemas"]["FileError"][]
      production_history: components["schemas"]["FileError"][]
      global_errors: components["schemas"]["FileError"][]
    }
    /**
     * @description * `SOURCING` - SOURCING
     *     * `DECISION` - DECISION
     * @enum {string}
     */
    FileTypeEnum: FileTypeEnum
    GenericCertificate: {
      certificate_id: string
      certificate_type: components["schemas"]["CertificateTypeEnum"]
      certificate_holder: string
      certificate_issuer?: string | null
      address?: string | null
      /** Format: date */
      valid_from: string
      /** Format: date */
      valid_until: string
      download_link?: string | null
      scope?: unknown
      input?: unknown
      output?: unknown
    }
    /**
     * @description * `Default` - Valeurs par défaut
     *     * `Actual` - Valeurs réelles
     *     * `NUTS2` - Valeurs NUTS2
     * @enum {string}
     */
    GesOptionEnum: GesOptionEnum
    GroupAssignmentResponse: {
      assigned_tickets_count: number
    }
    InvalidateRequest: {
      period: number
    }
    LotRequest: {
      transport_document_type?: components["schemas"]["TransportDocumentTypeEnum"]
      transport_document_reference?: string | null
      /** Format: double */
      quantity?: number
      /** Format: double */
      volume?: number
      unit?: components["schemas"]["UnitEnum"]
      biofuel_code?: string
      feedstock_code?: string
      country_code?: string
      free_field?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      unknown_producer?: string | null
      carbure_production_site?: string[]
      unknown_production_site?: string | null
      production_site_certificate?: string | null
      production_site_certificate_type?: string | null
      production_country_code?: string
      /** Format: date */
      production_site_commissioning_date?: string | null
      production_site_double_counting_certificate?: string | null
      unknown_supplier?: string | null
      supplier_certificate?: string | null
      supplier_certificate_type?: string | null
      vendor_certificate?: string | null
      vendor_certificate_type?: string | null
      delivery_type?: components["schemas"]["DeliveryTypeEnum"]
      /** Format: date */
      delivery_date?: string | null
      unknown_client?: string | null
      carbure_delivery_site_depot_id?: string[]
      unknown_delivery_site?: string | null
      delivery_site_country_code?: string
    }
    /**
     * @description * `DRAFT` - DRAFT
     *     * `PENDING` - PENDING
     *     * `ACCEPTED` - ACCEPTED
     *     * `REJECTED` - REJECTED
     *     * `FROZEN` - FROZEN
     *     * `DELETED` - DELETED
     * @enum {string}
     */
    LotStatusEnum: LotStatusEnum
    LotsInOut: {
      supplier: string
      client?: string
      biofuel_code: string
      delivery_type?: string
      /** Format: double */
      volume_sum: number
      /** Format: double */
      weight_sum: number
      /** Format: double */
      lhv_amount_sum: number
      /** Format: double */
      avg_ghg_reduction: number
      total: number
      pending: number
    }
    MarkConformRequest: {
      selection: number[]
    }
    MarkNonConformRequest: {
      selection: number[]
    }
    OtpResponse: {
      valid_until: string
    }
    PaginatedAPIKeyListList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["APIKeyList"][]
    }
    PaginatedCarbureLotPublicList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["CarbureLotPublic"][]
    }
    PaginatedCarbureStockPublicList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["CarbureStockPublic"][]
    }
    PaginatedEntityPreviewList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["EntityPreview"][]
    }
    PaginatedSafTicketList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["SafTicket"][]
    }
    PaginatedSafTicketSourceList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["SafTicketSource"][]
    }
    /**
     * @description * `l` - litres
     *     * `kg` - kg
     *     * `MJ` - MJ
     * @enum {string}
     */
    PreferredUnitEnum: PreferredUnitEnum
    ProductionSite: {
      readonly id: number
      readonly producer: components["schemas"]["Entity"]
      name: string
      readonly country: components["schemas"]["Country"]
      /** Format: date */
      date_mise_en_service?: string | null
      ges_option?: components["schemas"]["GesOptionEnum"]
      eligible_dc?: boolean
      dc_reference?: string
      site_siret?: string
      address?: string
      city?: string
      postal_code?: string
      gps_coordinates?: string | null
      manager_name?: string
      manager_phone?: string
      manager_email?: string
    }
    ProductionSiteCertificate: {
      certificate_id: string
      certificate_type: components["schemas"]["CertificateTypeEnum"]
      certificate_holder: string
      certificate_issuer?: string | null
      address?: string | null
      /** Format: date */
      valid_from: string
      /** Format: date */
      valid_until: string
      download_link?: string | null
      scope?: unknown
      input?: unknown
      output?: unknown
    }
    RejectDoubleCountingRequest: {
      dca_id: number
    }
    RequestAccessRequest: {
      comment?: string
      role: string
      entity_id: number
    }
    RequestFixRequest: {
      lot_ids: number[]
    }
    RequestPasswordResetRequest: {
      username: string
    }
    ResetPasswordRequest: {
      uidb64: string
      token: string
      /** Mot de passe */
      password1: string
      /** Confirmation du mot de passe */
      password2: string
    }
    Response: {
      status: string
    }
    Response200:
      | components["schemas"]["SnapshotReponse"]
      | components["schemas"]["AdminSnapshotReponse"]
    ResponseSuccess: {
      status: string
    }
    RevokeAccessRequest: {
      entity_id: number
    }
    /**
     * @description * `RO` - Lecture Seule
     *     * `RW` - Lecture/Écriture
     *     * `ADMIN` - Administrateur
     *     * `AUDITOR` - Auditeur
     * @enum {string}
     */
    RoleEnum: RoleEnum
    SafTicket: {
      readonly id: number
      carbure_id?: string | null
      year: number
      assignment_period: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date */
      agreement_date?: string | null
      readonly supplier: string
      readonly client: string
      /** Format: double */
      volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      ghg_reduction?: number
    }
    SafTicketDetails: {
      readonly id: number
      carbure_id?: string | null
      year: number
      assignment_period: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date-time */
      readonly created_at: string | null
      readonly supplier: string
      readonly client: string
      free_field?: string | null
      /** Format: date */
      agreement_date?: string | null
      agreement_reference?: string | null
      /** Format: double */
      volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      readonly carbure_producer: components["schemas"]["EntityPreview"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      /** Format: date */
      production_site_commissioning_date?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_total?: number
      client_comment?: string | null
      readonly parent_ticket_source: components["schemas"]["SafTicketSourcePreview"]
    }
    SafTicketPreview: {
      readonly id: number
      carbure_id?: string | null
      readonly client: string
      /** Format: date */
      agreement_date?: string | null
      /** Format: double */
      volume: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date-time */
      readonly created_at: string | null
    }
    SafTicketSource: {
      readonly id: number
      carbure_id?: string | null
      year: number
      delivery_period: number
      /** Format: date-time */
      readonly created_at: string | null
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      ghg_reduction?: number
      readonly assigned_tickets: components["schemas"]["SafTicketPreview"][]
      readonly parent_lot: components["schemas"]["SafTicketSourceParentLot"]
    }
    SafTicketSourceAssignment: {
      client_id: number
      /** Format: double */
      volume: number
      agreement_reference?: string
      agreement_date?: string
      free_field?: string | null
      assignment_period: number
    }
    SafTicketSourceAssignmentRequest: {
      client_id: number
      /** Format: double */
      volume: number
      agreement_reference?: string
      agreement_date?: string
      free_field?: string | null
      assignment_period: number
    }
    SafTicketSourceDetails: {
      readonly id: number
      carbure_id?: string | null
      year: number
      delivery_period: number
      /** Format: date-time */
      readonly created_at: string | null
      readonly added_by: components["schemas"]["EntityPreview"]
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      readonly assigned_tickets: components["schemas"]["SafTicketPreview"][]
      readonly carbure_producer: components["schemas"]["EntityPreview"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      /** Format: date */
      production_site_commissioning_date?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_total?: number
      parent_lot: components["schemas"]["CarbureLotPublic"]
    }
    SafTicketSourceGroupAssignmentRequest: {
      client_id: number
      /** Format: double */
      volume: number
      agreement_reference?: string
      agreement_date?: string
      free_field?: string | null
      assignment_period: number
      ticket_sources_ids: number[]
    }
    SafTicketSourceParentLot: {
      readonly id: number
      carbure_id?: string
    }
    SafTicketSourcePreview: {
      readonly id: number
      carbure_id?: string | null
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
    }
    SendRequest: {
      selection: number[]
    }
    SendResponse: {
      submitted: number
      sent: number
      auto_accepted: number
      ignored: number
      rejected: number
    }
    /**
     * @description * `OTHER` - Autre
     *     * `EFS` - EFS
     *     * `EFPE` - EFPE
     *     * `OIL DEPOT` - OIL DEPOT
     *     * `BIOFUEL DEPOT` - BIOFUEL DEPOT
     *     * `HEAT PLANT` - HEAT PLANT
     *     * `POWER PLANT` - POWER PLANT
     *     * `COGENERATION PLANT` - COGENERATION PLANT
     *     * `PRODUCTION BIOLIQUID` - PRODUCTION BIOLIQUID
     *     * `EFCA` - EFCA
     * @enum {string}
     */
    SiteTypeEnum: SiteTypeEnum
    SnapshotReponse: {
      draft: number
      in_total: number
      in_pending: number
      in_tofix: number
      stock: number
      stock_total: number
      out_total: number
      out_pending: number
      out_tofix: number
      draft_imported: number
      draft_stocks: number
    }
    SplitCreateRequest: {
      stock_id: string
      /** Format: double */
      volume: number
      /** Format: date */
      delivery_date: string
      supplier_certificate?: string
      /** Format: date */
      dispatch_date?: string
      unknown_client?: string
      unknown_delivery_site?: string
      delivery_site_country_id?: string
      transport_document_type?: string
      delivery_type?: string
      transport_document_reference?: string
      carbure_delivery_site_id?: string
      carbure_client_id?: string
    }
    SplitRequest: {
      payload: components["schemas"]["SplitCreateRequest"][]
    }
    SplitResponse: {
      /** @default success */
      status: string
      data: number[]
    }
    StockCancelTransformationRequest: {
      stock_ids: number[]
    }
    StockDetailsResponse: {
      stock: components["schemas"]["CarbureStockPublic"]
      parent_lot: components["schemas"]["CarbureLotPublic"] | null
      parent_transformation:
        | components["schemas"]["CarbureStockTransformationPublic"]
        | null
      children_lot: components["schemas"]["CarbureLotPublic"][]
      children_transformation: components["schemas"]["CarbureStockTransformationPublic"][]
      events: components["schemas"]["CarbureLotComment"][]
      updates: components["schemas"]["CarbureLotComment"][]
      comments: components["schemas"]["CarbureLotEvent"][]
    }
    StockFlush: {
      stock_ids: number[]
      free_field?: string | null
    }
    StockFlushRequest: {
      stock_ids: number[]
      free_field?: string | null
    }
    StockSummary: {
      supplier: string
      biofuel_code: string
      /** Format: double */
      remaining_volume_sum: number
      /** Format: double */
      remaining_weight_sum: number
      /** Format: double */
      remaining_lhv_amount_sum: number
      /** Format: double */
      avg_ghg_reduction: number
      total: number
    }
    StocksSummaryResponse: {
      count: number
      /** Format: double */
      total_remaining_volume: number
      /** Format: double */
      total_remaining_weight: number
      /** Format: double */
      total_remaining_lhv_amount: number
      stock: components["schemas"]["StockSummary"][]
    }
    SubmitFixRequest: {
      lot_ids: number[]
    }
    SummaryResponse: {
      count: number
      /** Format: double */
      total_volume: number
      /** Format: double */
      total_weight: number
      /** Format: double */
      total_lhv_amount: number
      /** In  */
      in_: components["schemas"]["LotsInOut"][]
      out: components["schemas"]["LotsInOut"][]
      lots: components["schemas"]["LotsInOut"][]
    }
    SustainabilityDeclaration: {
      entity: components["schemas"]["Entity"]
      declared?: boolean
      checked?: boolean
      /** Format: date */
      deadline?: string
      readonly period: string
      reminder_count?: number
    }
    TogglePinRequest: {
      selection: number[]
      /** @default false */
      notify_admin: boolean
      /** @default false */
      notify_auditor: boolean
    }
    ToggleWarningRequest: {
      errors: string[]
      /** @default false */
      checked: boolean
    }
    TransformRequest: {
      payload: components["schemas"]["TransformSerCreateRequest"][]
    }
    TransformSerCreateRequest: {
      stock_id: string
      transformation_type: components["schemas"]["TransformationTypeEnum"]
      /** Format: double */
      volume_ethanol?: number
      /** Format: double */
      volume_etbe?: number
      /** Format: double */
      volume_denaturant?: number
      /** Format: double */
      volume_etbe_eligible?: number
    }
    /**
     * @description * `UNKNOWN` - UNKNOWN
     *     * `ETH_ETBE` - ETH_ETBE
     * @enum {string}
     */
    TransformationTypeEnum: TransformationTypeEnum
    /**
     * @description * `DAU` - DAU
     *     * `DAE` - DAE
     *     * `DSA` - DSA
     *     * `DSAC` - DSAC
     *     * `DSP` - DSP
     *     * `OTHER` - OTHER
     * @enum {string}
     */
    TransportDocumentTypeEnum: TransportDocumentTypeEnum
    /**
     * @description * `l` - l
     *     * `kg` - kg
     *     * `mj` - pci
     * @enum {string}
     */
    UnitEnum: UnitEnum
    UpdateManyRequest: {
      transport_document_type?: components["schemas"]["TransportDocumentTypeEnum"]
      transport_document_reference?: string | null
      /** Format: double */
      quantity?: number
      /** Format: double */
      volume?: number
      unit?: components["schemas"]["UnitEnum"]
      biofuel_code?: string
      feedstock_code?: string
      country_code?: string
      free_field?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      unknown_producer?: string | null
      carbure_production_site?: string[]
      unknown_production_site?: string | null
      production_site_certificate?: string | null
      production_site_certificate_type?: string | null
      production_country_code?: string
      /** Format: date */
      production_site_commissioning_date?: string | null
      production_site_double_counting_certificate?: string | null
      unknown_supplier?: string | null
      supplier_certificate?: string | null
      supplier_certificate_type?: string | null
      vendor_certificate?: string | null
      vendor_certificate_type?: string | null
      delivery_type?: components["schemas"]["DeliveryTypeEnum"]
      /** Format: date */
      delivery_date?: string | null
      unknown_client?: string | null
      carbure_delivery_site_depot_id?: string[]
      unknown_delivery_site?: string | null
      delivery_site_country_code?: string
      /** @default false */
      dry_run: boolean
      lots_ids: number[]
      comment: string
    }
    UpdatedQuotasRequest: {
      approved_quotas: number[][]
    }
    /** @description Serializer for creating new users. Includes required fields
     *     and repeated password validation. */
    UserCreation: {
      /**
       * Adresse électronique
       * Format: email
       */
      email: string
      /** Nom */
      name: string
    }
    /** @description Serializer for creating new users. Includes required fields
     *     and repeated password validation. */
    UserCreationRequest: {
      /**
       * Adresse électronique
       * Format: email
       */
      email: string
      /** Nom */
      name: string
      /** Mot de passe */
      password1: string
      /** Confirmation du mot de passe */
      password2: string
    }
    UserEntity: {
      readonly id: number
      readonly name: string
      readonly is_enabled: boolean
      readonly entity_type: components["schemas"]["EntityTypeEnum"]
      readonly has_mac: boolean
      readonly has_trading: boolean
      readonly has_direct_deliveries: boolean
      readonly has_stocks: boolean
      readonly legal_name: string
      readonly registration_id: string
      readonly sustainability_officer: string
      readonly sustainability_officer_phone_number: string
      readonly sustainability_officer_email: string
      readonly registered_address: string
      readonly registered_zipcode: string
      readonly registered_city: string
      registered_country?: components["schemas"]["Country"]
      readonly default_certificate: string | null
      readonly preferred_unit: components["schemas"]["PreferredUnitEnum"]
      readonly has_saf: boolean
      readonly has_elec: boolean
      readonly activity_description: string
      /** Format: uri */
      readonly website: string
      readonly vat_number: string
      readonly ext_admin_pages: components["schemas"]["ExtAdminPagesEnum"][]
    }
    UserLoginRequest: {
      username: string
      password: string
    }
    /** @description A serializer for re-sending the user activation email. Includes email field only. */
    UserResendActivationLinkRequest: {
      /**
       * Courriel
       * Format: email
       */
      email: string
    }
    UserRights: {
      readonly name: string
      /** Format: email */
      readonly email: string
      entity: components["schemas"]["UserEntity"]
      readonly role: components["schemas"]["RoleEnum"]
      /** Format: date-time */
      expiration_date?: string | null
    }
    UserRightsRequests: {
      readonly id: number
      readonly user: string[]
      entity: components["schemas"]["UserEntity"]
      /** Format: date-time */
      readonly date_requested: string
      readonly status: components["schemas"]["UserRightsRequestsStatusEnum"]
      comment?: string | null
      readonly role: components["schemas"]["RoleEnum"]
      /** Format: date-time */
      expiration_date?: string | null
    }
    /**
     * @description * `PENDING` - En attente de validation
     *     * `ACCEPTED` - Accepté
     *     * `REJECTED` - Refusé
     *     * `REVOKED` - Révoqué
     * @enum {string}
     */
    UserRightsRequestsStatusEnum: UserRightsRequestsStatusEnum
    UserSettingsResponseSeriaizer: {
      /** Format: email */
      email: string
      rights: components["schemas"]["UserRights"][]
      requests: components["schemas"]["UserRightsRequests"][]
    }
    ValidateDeclarationRequest: {
      period: number
    }
    /** @description A serializer for submitting the OTP sent via email. Includes otp_token field only. */
    VerifyOTPRequest: {
      /** Entrez le code à 6 chiffres reçu par email */
      otp_token: string
    }
    Years: {
      years: number[]
    }
    addExcelResponse: {
      lots: number
      valid: number
      invalid: number
    }
    /**
     * @description * `PENDING` - En attente
     *     * `ACCEPTED` - Accepté
     *     * `REJECTED` - Refusé
     * @enum {string}
     */
    "saf.filters.TicketFilter.status": PathsApiSafTicketsGetParametersQueryStatus
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  apikey_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedAPIKeyListList"]
        }
      }
    }
  }
  apikey_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["APIKeyRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["APIKeyRequest"]
        "multipart/form-data": components["schemas"]["APIKeyRequest"]
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["APIKey"]
        }
      }
    }
  }
  apikey_retrieve: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this api key. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["APIKey"]
        }
      }
    }
  }
  apikey_revoke_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this api key. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["APIKeyRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["APIKeyRequest"]
        "multipart/form-data": components["schemas"]["APIKeyRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["APIKey"]
        }
      }
    }
  }
  auth_activate_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivateAccountRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ActivateAccountRequest"]
        "multipart/form-data": components["schemas"]["ActivateAccountRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ActivateResponse"]
        }
      }
      /** @description Bad request - missing fields. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  auth_login_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["UserLoginRequest"]
        "multipart/form-data": components["schemas"]["UserLoginRequest"]
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Bad request - missing fields. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  auth_logout_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Request successful. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  auth_register_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreationRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["UserCreationRequest"]
        "multipart/form-data": components["schemas"]["UserCreationRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_request_activation_link_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserResendActivationLinkRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["UserResendActivationLinkRequest"]
        "multipart/form-data": components["schemas"]["UserResendActivationLinkRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_request_otp_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["OtpResponse"]
        }
      }
    }
  }
  auth_request_password_reset_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestPasswordResetRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["RequestPasswordResetRequest"]
        "multipart/form-data": components["schemas"]["RequestPasswordResetRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_reset_password_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ResetPasswordRequest"]
        "multipart/form-data": components["schemas"]["ResetPasswordRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_verify_otp_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyOTPRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["VerifyOTPRequest"]
        "multipart/form-data": components["schemas"]["VerifyOTPRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  double_counting_agreements_list: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Ordre
         *
         *     * `production_site` - Production site
         *     * `-production_site` - Production site (décroissant)
         *     * `valid_until` - Valid until
         *     * `-valid_until` - Valid until (décroissant) */
        order_by?: PathsApiDoubleCountingAgreementsGetParametersQueryOrder_by[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A search term. */
        search?: string
        /** @description Year */
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DoubleCountingApplicationPartial"][]
        }
      }
    }
  }
  double_counting_agreements_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Certificat Double Compte. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DoubleCountingRegistrationDetails"]
        }
      }
    }
  }
  double_counting_agreements_agreement_admin_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Ordre
         *
         *     * `production_site` - Production site
         *     * `-production_site` - Production site (décroissant)
         *     * `valid_until` - Valid until
         *     * `-valid_until` - Valid until (décroissant) */
        order_by?: PathsApiDoubleCountingAgreementsGetParametersQueryOrder_by[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A search term. */
        search?: string
        /** @description Year */
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["AgreementLists"]
        }
      }
    }
  }
  double_counting_agreements_agreement_public_list: {
    parameters: {
      query?: {
        /** @description Ordre
         *
         *     * `production_site` - Production site
         *     * `-production_site` - Production site (décroissant)
         *     * `valid_until` - Valid until
         *     * `-valid_until` - Valid until (décroissant) */
        order_by?: PathsApiDoubleCountingAgreementsGetParametersQueryOrder_by[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DoubleCountingRegistrationPublic"][]
        }
      }
    }
  }
  double_counting_agreements_export_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Ordre
         *
         *     * `production_site` - Production site
         *     * `-production_site` - Production site (décroissant)
         *     * `valid_until` - Valid until
         *     * `-valid_until` - Valid until (décroissant) */
        order_by?: PathsApiDoubleCountingAgreementsGetParametersQueryOrder_by[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A search term. */
        search?: string
        /** @description Year */
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": string
        }
      }
    }
  }
  double_counting_applications_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Dossier Double Compte. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DoubleCountingApplication"]
        }
      }
    }
  }
  double_counting_applications_export_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Dossier Double Compte. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/force-download": string
        }
      }
    }
  }
  double_counting_applications_update_approved_quotas_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Dossier Double Compte. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatedQuotasRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["UpdatedQuotasRequest"]
        "multipart/form-data": components["schemas"]["UpdatedQuotasRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Response"]
        }
      }
    }
  }
  double_counting_applications_add_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["DoubleCountingAdminAddRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["DoubleCountingAdminAddRequest"]
        "multipart/form-data": components["schemas"]["DoubleCountingAdminAddRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Response"]
        }
      }
    }
  }
  double_counting_applications_approve_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApprouveDoubleCountingRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ApprouveDoubleCountingRequest"]
        "multipart/form-data": components["schemas"]["ApprouveDoubleCountingRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Response"]
        }
      }
    }
  }
  double_counting_applications_check_admin_files_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckAdminFileRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CheckAdminFileRequest"]
        "multipart/form-data": components["schemas"]["CheckAdminFileRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CheckFileResponse"][]
        }
      }
    }
  }
  double_counting_applications_check_file_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string
        }
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CheckFileResponse"]
        }
      }
    }
  }
  double_counting_applications_export_application_retrieve: {
    parameters: {
      query: {
        /** @description Doublecount application ID */
        dca_id: number
        /** @description Dechet industriel */
        di?: string
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document": string
        }
      }
    }
  }
  double_counting_applications_list_admin_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApplicationListe"]
        }
      }
    }
  }
  double_counting_applications_reject_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RejectDoubleCountingRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["RejectDoubleCountingRequest"]
        "multipart/form-data": components["schemas"]["RejectDoubleCountingRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Response"]
        }
      }
    }
  }
  double_counting_snapshot_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApplicationSnapshot"]
        }
      }
    }
  }
  entities_enable_create: {
    parameters: {
      query: {
        /** @description The id of the admin entity enabling the company */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Entity. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyResponseRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["EmptyResponseRequest"]
        "multipart/form-data": components["schemas"]["EmptyResponseRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EmptyResponse"]
        }
      }
    }
  }
  resources_biofuels_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `name`, `name_en`, and `code` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Biofuel"][]
        }
      }
    }
  }
  resources_certificates_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `certificate_id` and `certificate_holder` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["GenericCertificate"][]
        }
      }
    }
  }
  resources_countries_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `name`, `name_en` and `code_pays` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Country"][]
        }
      }
    }
  }
  resources_depots_list: {
    parameters: {
      query?: {
        /** @description Public Only */
        public_only?: boolean
        /** @description Search within the fields `name`, `name_en` and `code_pays` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Depot"][]
        }
      }
    }
  }
  resources_entities_list: {
    parameters: {
      query?: {
        /** @description Only keep specific entity types */
        entity_type?: string[]
        /** @description Only show enabled entities */
        is_enabled?: boolean
        /** @description Search within the field `name` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EntityPreview"][]
        }
      }
    }
  }
  resources_feedstocks_list: {
    parameters: {
      query?: {
        /** @description Double compte only */
        double_count_only?: boolean
        /** @description Search within the fields `name`, `name_en` and `code` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["FeedStock"][]
        }
      }
    }
  }
  resources_production_sites_list: {
    parameters: {
      query?: {
        /** @description Search within the field `producer_id` */
        producer_id?: number
        /** @description Search within the field `name` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductionSite"][]
        }
      }
    }
  }
  saf_clients_list: {
    parameters: {
      query?: {
        entity_id?: string
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedEntityPreviewList"]
        }
      }
    }
  }
  saf_clients_retrieve: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this Entity. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EntityPreview"]
        }
      }
    }
  }
  saf_snapshot_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Year */
        year: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json":
            | {
                tickets_pending: number
                tickets_accepted: number
              }
            | {
                ticket_sources_available: number
                ticket_sources_history: number
                tickets_assigned: number
                tickets_assigned_pending: number
                tickets_assigned_accepted: number
                tickets_assigned_rejected: number
                tickets_received: number
                tickets_received_pending: number
                tickets_received_accepted: number
              }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_ticket_sources_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedSafTicketSourceList"]
        }
      }
    }
  }
  saf_ticket_sources_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketSourceDetails"]
        }
      }
    }
  }
  saf_ticket_sources_assign_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceAssignmentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceAssignmentRequest"]
        "multipart/form-data": components["schemas"]["SafTicketSourceAssignmentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketSourceAssignment"]
        }
      }
    }
  }
  saf_ticket_sources_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  saf_ticket_sources_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Filter string to apply */
        filter?: string
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
    }
  }
  saf_ticket_sources_group_assign_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceGroupAssignmentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceGroupAssignmentRequest"]
        "multipart/form-data": components["schemas"]["SafTicketSourceGroupAssignmentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["GroupAssignmentResponse"]
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedSafTicketList"]
        }
      }
    }
  }
  saf_tickets_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketDetails"]
        }
      }
    }
  }
  saf_tickets_accept_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CommentRequest"]
        "multipart/form-data": components["schemas"]["CommentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_cancel_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CommentRequest"]
        "multipart/form-data": components["schemas"]["CommentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_credit_source_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicket"]
        }
      }
    }
  }
  saf_tickets_reject_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CommentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CommentRequest"]
        "multipart/form-data": components["schemas"]["CommentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  saf_tickets_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Filter string to apply */
        filter?: string
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
    }
  }
  saf_years_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": number[]
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  user_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserSettingsResponseSeriaizer"]
        }
      }
    }
  }
  user_request_access_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestAccessRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["RequestAccessRequest"]
        "multipart/form-data": components["schemas"]["RequestAccessRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ResponseSuccess"]
        }
      }
    }
  }
  user_revoke_access_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RevokeAccessRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["RevokeAccessRequest"]
        "multipart/form-data": components["schemas"]["RevokeAccessRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ResponseSuccess"]
        }
      }
    }
  }
  v2_transactions_lots_list: {
    parameters: {
      query?: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedCarbureLotPublicList"]
        }
      }
    }
  }
  v2_transactions_lots_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this CarbureLot. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_duplicate_retrieve: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this CarbureLot. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_toggle_warning_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this CarbureLot. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ToggleWarningRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ToggleWarningRequest"]
        "multipart/form-data": components["schemas"]["ToggleWarningRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_update_lot_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this CarbureLot. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LotRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["LotRequest"]
        "multipart/form-data": components["schemas"]["LotRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_blending_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptBlendingRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptBlendingRequest"]
        "multipart/form-data": components["schemas"]["AcceptBlendingRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_consumption_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptConsumptionRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptConsumptionRequest"]
        "multipart/form-data": components["schemas"]["AcceptConsumptionRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_direct_delivery_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptDirectDeliveryRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptDirectDeliveryRequest"]
        "multipart/form-data": components["schemas"]["AcceptDirectDeliveryRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_export_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptExportRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptExportRequest"]
        "multipart/form-data": components["schemas"]["AcceptExportRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_in_stock_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptStockRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptStockRequest"]
        "multipart/form-data": components["schemas"]["AcceptStockRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_processing_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptProcessingRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptProcessingRequest"]
        "multipart/form-data": components["schemas"]["AcceptProcessingRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_rfc_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptRFCRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptRFCRequest"]
        "multipart/form-data": components["schemas"]["AcceptRFCRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_accept_trading_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptTradingRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AcceptTradingRequest"]
        "multipart/form-data": components["schemas"]["AcceptTradingRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_add_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateLotRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CreateLotRequest"]
        "multipart/form-data": components["schemas"]["CreateLotRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_add_comment_create: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddCommentRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["AddCommentRequest"]
        "multipart/form-data": components["schemas"]["AddCommentRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_add_excel_create: {
    parameters: {
      query: {
        /** @description Entity ID to associate the file with */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["AddExcelRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["addExcelResponse"]
        }
      }
    }
  }
  v2_transactions_lots_admin_declarations_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Period */
        period: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeclarationSummary"]
        }
      }
    }
  }
  v2_transactions_lots_approve_fix_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApproveFixRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ApproveFixRequest"]
        "multipart/form-data": components["schemas"]["ApproveFixRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_bulk_create_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLotRequest"][]
        "application/x-www-form-urlencoded": components["schemas"]["CreateLotRequest"][]
        "multipart/form-data": components["schemas"]["CreateLotRequest"][]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["BulkCreateResponse"]
        }
      }
    }
  }
  v2_transactions_lots_cancel_accept_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CancelAcceptRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["CancelAcceptRequest"]
        "multipart/form-data": components["schemas"]["CancelAcceptRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_declarations_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Year */
        year: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_declarations_invalidate_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvalidateRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["InvalidateRequest"]
        "multipart/form-data": components["schemas"]["InvalidateRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_declarations_validate_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateDeclarationRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["ValidateDeclarationRequest"]
        "multipart/form-data": components["schemas"]["ValidateDeclarationRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_delete_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteLotsRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["DeleteLotsRequest"]
        "multipart/form-data": components["schemas"]["DeleteLotsRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeleteLotsResponse"]
        }
      }
    }
  }
  v2_transactions_lots_delete_many_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteLotsManyRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["DeleteLotsManyRequest"]
        "multipart/form-data": components["schemas"]["DeleteLotsManyRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["DeleteLotsManyResponse"]
        }
      }
    }
  }
  v2_transactions_lots_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  v2_transactions_lots_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_map_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "text/html": string
        }
      }
    }
  }
  v2_transactions_lots_mark_conform_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["MarkConformRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["MarkConformRequest"]
        "multipart/form-data": components["schemas"]["MarkConformRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_mark_non_conform_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["MarkNonConformRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["MarkNonConformRequest"]
        "multipart/form-data": components["schemas"]["MarkNonConformRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_reject_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_request_fix_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestFixRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["RequestFixRequest"]
        "multipart/form-data": components["schemas"]["RequestFixRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_send_create: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["SendRequest"]
        "multipart/form-data": components["schemas"]["SendRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SendResponse"]
        }
      }
    }
  }
  v2_transactions_lots_submit_fix_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitFixRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["SubmitFixRequest"]
        "multipart/form-data": components["schemas"]["SubmitFixRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_summary_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        added_by?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        category?: string
        /** @description Comma-separated list of client types */
        client_types?: string[]
        /** @description Comma-separated list of clients */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        conformity?: PathsApiV2TransactionsLotsGetParametersQueryConformity[]
        /** @description Correction */
        correction?: boolean
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        correction_status?: PathsApiV2TransactionsLotsGetParametersQueryCorrection_status[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Deadline */
        deadline?: boolean
        /** @description Comma-separated list of delivery sites */
        delivery_sites?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_types?: PathsApiV2TransactionsLotsGetParametersQueryDelivery_types[]
        /** @description Entity ID */
        entity_id: number
        /** @description Comma-separated list of errors */
        errors?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: number[]
        /** @description History */
        history?: boolean
        /** @description Invalid */
        invalid?: boolean
        lot_status?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        ml_scoring?: number[]
        /** @description Ordre
         *
         *     * `id` - Id
         *     * `-id` - Id (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `biofuel` - Biofuel Name
         *     * `-biofuel` - Biofuel Name (décroissant)
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - GHG Reduction
         *     * `-ghg_reduction` - GHG Reduction (décroissant)
         *     * `country_of_origin` - Country of Origin
         *     * `-country_of_origin` - Country of Origin (décroissant)
         *     * `added_by` - Added By
         *     * `-added_by` - Added By (décroissant) */
        order?: PathsApiV2TransactionsLotsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        scores?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: string[]
        /** @description * `DRAFTS` - DRAFTS
         *     * `IN` - IN
         *     * `OUT` - OUT
         *     * `DECLARATION` - DECLARATION
         *     * `ALERTS` - ALERTS
         *     * `LOTS` - LOTS */
        status?: PathsApiV2TransactionsLotsGetParametersQueryStatus
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SummaryResponse"]
        }
      }
    }
  }
  v2_transactions_lots_template_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  v2_transactions_lots_toggle_pin_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["TogglePinRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["TogglePinRequest"]
        "multipart/form-data": components["schemas"]["TogglePinRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_lots_update_many_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateManyRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["UpdateManyRequest"]
        "multipart/form-data": components["schemas"]["UpdateManyRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureLotPublic"]
        }
      }
    }
  }
  v2_transactions_snapshot_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response regular user or admin or auditor user */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Response200"]
        }
      }
    }
  }
  v2_transactions_stocks_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        blacklist?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        depots?: string[]
        /** @description Entity ID */
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        history?: boolean
        /** @description Ordre
         *
         *     * `id` - ID
         *     * `-id` - ID (décroissant)
         *     * `remaining_volume` - Remaining Volume
         *     * `-remaining_volume` - Remaining Volume (décroissant)
         *     * `biofuel` - Biofuel
         *     * `-biofuel` - Biofuel (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `country` - Country of Origin
         *     * `-country` - Country of Origin (décroissant) */
        order?: PathsApiV2TransactionsStocksGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Comma-separated list of periods */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        query?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: number[]
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedCarbureStockPublicList"]
        }
      }
    }
  }
  v2_transactions_stocks_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this CarbureStock. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["StockDetailsResponse"]
        }
      }
    }
  }
  v2_transactions_stocks_cancel_transformation_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["StockCancelTransformationRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["StockCancelTransformationRequest"]
        "multipart/form-data": components["schemas"]["StockCancelTransformationRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureStockPublic"]
        }
      }
    }
  }
  v2_transactions_stocks_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        blacklist?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        depots?: string[]
        /** @description Entity ID */
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        history?: boolean
        /** @description Ordre
         *
         *     * `id` - ID
         *     * `-id` - ID (décroissant)
         *     * `remaining_volume` - Remaining Volume
         *     * `-remaining_volume` - Remaining Volume (décroissant)
         *     * `biofuel` - Biofuel
         *     * `-biofuel` - Biofuel (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `country` - Country of Origin
         *     * `-country` - Country of Origin (décroissant) */
        order?: PathsApiV2TransactionsStocksGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Comma-separated list of periods */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        query?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: number[]
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureStockPublic"]
        }
      }
    }
  }
  v2_transactions_stocks_flush_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["StockFlushRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["StockFlushRequest"]
        "multipart/form-data": components["schemas"]["StockFlushRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["StockFlush"]
        }
      }
    }
  }
  v2_transactions_stocks_split_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SplitRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["SplitRequest"]
        "multipart/form-data": components["schemas"]["SplitRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SplitResponse"]
        }
      }
    }
  }
  v2_transactions_stocks_summary_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        biofuels?: string[]
        blacklist?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        depots?: string[]
        /** @description Entity ID */
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        history?: boolean
        /** @description Ordre
         *
         *     * `id` - ID
         *     * `-id` - ID (décroissant)
         *     * `remaining_volume` - Remaining Volume
         *     * `-remaining_volume` - Remaining Volume (décroissant)
         *     * `biofuel` - Biofuel
         *     * `-biofuel` - Biofuel (décroissant)
         *     * `supplier` - Supplier
         *     * `-supplier` - Supplier (décroissant)
         *     * `country` - Country of Origin
         *     * `-country` - Country of Origin (décroissant) */
        order?: PathsApiV2TransactionsStocksGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Comma-separated list of periods */
        periods?: number[]
        /** @description Comma-separated list of production sites */
        production_sites?: string[]
        query?: string
        /** @description A search term. */
        search?: string
        /** @description Comma-separated list of selections */
        selection?: number[]
        /** @description Comma-separated list of suppliers */
        suppliers?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["StocksSummaryResponse"]
        }
      }
    }
  }
  v2_transactions_stocks_template_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  v2_transactions_stocks_transform_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransformRequest"]
        "application/x-www-form-urlencoded": components["schemas"]["TransformRequest"]
        "multipart/form-data": components["schemas"]["TransformRequest"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CarbureStockPublic"]
        }
      }
    }
  }
  v2_transactions_years_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Years"]
        }
      }
    }
  }
}
export enum PathsApiDoubleCountingAgreementsGetParametersQueryOrder_by {
  ValueMinusproduction_site = "-production_site",
  ValueMinusvalid_until = "-valid_until",
  production_site = "production_site",
  valid_until = "valid_until",
}
export enum PathsApiSafTicketSourcesGetParametersQueryOrder {
  ValueMinusfeedstock = "-feedstock",
  ValueMinusghg_reduction = "-ghg_reduction",
  ValueMinusperiod = "-period",
  ValueMinusvolume = "-volume",
  feedstock = "feedstock",
  ghg_reduction = "ghg_reduction",
  period = "period",
  volume = "volume",
}
export enum PathsApiSafTicketSourcesGetParametersQueryStatus {
  AVAILABLE = "AVAILABLE",
  HISTORY = "HISTORY",
}
export enum PathsApiSafTicketsGetParametersQueryOrder {
  ValueMinusclient = "-client",
  ValueMinuscreated_at = "-created_at",
  ValueMinusfeedstock = "-feedstock",
  ValueMinusghg_reduction = "-ghg_reduction",
  ValueMinusperiod = "-period",
  ValueMinussuppliers = "-suppliers",
  ValueMinusvolume = "-volume",
  client = "client",
  created_at = "created_at",
  feedstock = "feedstock",
  ghg_reduction = "ghg_reduction",
  period = "period",
  suppliers = "suppliers",
  volume = "volume",
}
export enum PathsApiSafTicketsGetParametersQueryStatus {
  ACCEPTED = "ACCEPTED",
  PENDING = "PENDING",
  REJECTED = "REJECTED",
}
export enum PathsApiV2TransactionsLotsGetParametersQueryConformity {
  CONFORM = "CONFORM",
  NONCONFORM = "NONCONFORM",
  UNKNOWN = "UNKNOWN",
}
export enum PathsApiV2TransactionsLotsGetParametersQueryCorrection_status {
  FIXED = "FIXED",
  IN_CORRECTION = "IN_CORRECTION",
  NO_PROBLEMO = "NO_PROBLEMO",
}
export enum PathsApiV2TransactionsLotsGetParametersQueryDelivery_types {
  BLENDING = "BLENDING",
  CONSUMPTION = "CONSUMPTION",
  DIRECT = "DIRECT",
  EXPORT = "EXPORT",
  FLUSHED = "FLUSHED",
  PROCESSING = "PROCESSING",
  RFC = "RFC",
  STOCK = "STOCK",
  TRADING = "TRADING",
  UNKNOWN = "UNKNOWN",
}
export enum PathsApiV2TransactionsLotsGetParametersQueryOrder {
  ValueMinusadded_by = "-added_by",
  ValueMinusbiofuel = "-biofuel",
  ValueMinusclient = "-client",
  ValueMinuscountry_of_origin = "-country_of_origin",
  ValueMinusfeedstock = "-feedstock",
  ValueMinusghg_reduction = "-ghg_reduction",
  ValueMinusid = "-id",
  ValueMinusperiod = "-period",
  ValueMinussupplier = "-supplier",
  ValueMinusvolume = "-volume",
  added_by = "added_by",
  biofuel = "biofuel",
  client = "client",
  country_of_origin = "country_of_origin",
  feedstock = "feedstock",
  ghg_reduction = "ghg_reduction",
  id = "id",
  period = "period",
  supplier = "supplier",
  volume = "volume",
}
export enum PathsApiV2TransactionsLotsGetParametersQueryStatus {
  ALERTS = "ALERTS",
  DECLARATION = "DECLARATION",
  DRAFTS = "DRAFTS",
  IN = "IN",
  LOTS = "LOTS",
  OUT = "OUT",
}
export enum PathsApiV2TransactionsStocksGetParametersQueryOrder {
  ValueMinusbiofuel = "-biofuel",
  ValueMinuscountry = "-country",
  ValueMinusid = "-id",
  ValueMinusremaining_volume = "-remaining_volume",
  ValueMinussupplier = "-supplier",
  biofuel = "biofuel",
  country = "country",
  id = "id",
  remaining_volume = "remaining_volume",
  supplier = "supplier",
}
export enum CategoryEnum {
  CONV = "CONV",
  ANN_IX_A = "ANN-IX-A",
  ANN_IX_B = "ANN-IX-B",
  TALLOL = "TALLOL",
  OTHER = "OTHER",
}
export enum CertificateTypeEnum {
  SYSTEME_NATIONAL = "SYSTEME_NATIONAL",
  ISCC = "ISCC",
  REDCERT = "REDCERT",
  Value2BS = "2BS",
}
export enum CommentTypeEnum {
  REGULAR = "REGULAR",
  AUDITOR = "AUDITOR",
  ADMIN = "ADMIN",
}
export enum DoubleCountingAgreementStatus {
  ACTIVE = "ACTIVE",
  EXPIRED = "EXPIRED",
  EXPIRES_SOON = "EXPIRES_SOON",
  INCOMING = "INCOMING",
}
export enum DoubleCountingStatus {
  PENDING = "PENDING",
  INPROGRESS = "INPROGRESS",
  REJECTED = "REJECTED",
  ACCEPTED = "ACCEPTED",
}
export enum EntityTypeEnum {
  Producer = "Producteur",
  Operator = "Op\u00E9rateur",
  Administration = "Administration",
  Trader = "Trader",
  Auditor = "Auditor",
  ExternalAdmin = "Administration Externe",
  CPO = "Charge Point Operator",
  Airline = "Compagnie a\u00E9rienne",
  Unknown = "Unknown",
  PowerOrHeatProducer = "Power or Heat Producer",
}
export enum EventTypeEnum {
  CREATED = "CREATED",
  UPDATED = "UPDATED",
  VALIDATED = "VALIDATED",
  FIX_REQUESTED = "FIX_REQUESTED",
  MARKED_AS_FIXED = "MARKED_AS_FIXED",
  FIX_ACCEPTED = "FIX_ACCEPTED",
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  RECALLED = "RECALLED",
  DECLARED = "DECLARED",
  DELETED = "DELETED",
  DECLCANCEL = "DECLCANCEL",
  RESTORED = "RESTORED",
  CANCELLED = "CANCELLED",
  UPDATED_BY_ADMIN = "UPDATED_BY_ADMIN",
  DELETED_BY_ADMIN = "DELETED_BY_ADMIN",
}
export enum ExtAdminPagesEnum {
  DCA = "DCA",
  AGRIMER = "AGRIMER",
  TIRIB = "TIRIB",
  AIRLINE = "AIRLINE",
  ELEC = "ELEC",
}
export enum FileTypeEnum {
  SOURCING = "SOURCING",
  DECISION = "DECISION",
}
export enum GesOptionEnum {
  Default = "Default",
  Actual = "Actual",
  NUTS2 = "NUTS2",
}
export enum LotStatusEnum {
  DRAFT = "DRAFT",
  PENDING = "PENDING",
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  FROZEN = "FROZEN",
  DELETED = "DELETED",
}
export enum PreferredUnitEnum {
  l = "l",
  kg = "kg",
  MJ = "MJ",
}
export enum RoleEnum {
  ReadOnly = "RO",
  ReadWrite = "RW",
  Admin = "ADMIN",
  Auditor = "AUDITOR",
}
export enum SiteTypeEnum {
  OTHER = "OTHER",
  EFS = "EFS",
  EFPE = "EFPE",
  OIL_DEPOT = "OIL DEPOT",
  BIOFUEL_DEPOT = "BIOFUEL DEPOT",
  HEAT_PLANT = "HEAT PLANT",
  POWER_PLANT = "POWER PLANT",
  COGENERATION_PLANT = "COGENERATION PLANT",
  PRODUCTION_BIOLIQUID = "PRODUCTION BIOLIQUID",
  EFCA = "EFCA",
}
export enum TransformationTypeEnum {
  UNKNOWN = "UNKNOWN",
  ETH_ETBE = "ETH_ETBE",
}
export enum TransportDocumentTypeEnum {
  DAU = "DAU",
  DAE = "DAE",
  DSA = "DSA",
  DSAC = "DSAC",
  DSP = "DSP",
  OTHER = "OTHER",
}
export enum UnitEnum {
  l = "l",
  kg = "kg",
  mj = "mj",
}
export enum UserRightsRequestsStatusEnum {
  Pending = "PENDING",
  Accepted = "ACCEPTED",
  Rejected = "REJECTED",
  Revoked = "REVOKED",
}
