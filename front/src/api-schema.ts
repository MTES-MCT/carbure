/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/auth/auth/activate/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_activate_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/login/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_login_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/logout/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["auth_auth_logout_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/register/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_register_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/request-activation-link/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_request_activation_link_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/request-otp/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["auth_auth_request_otp_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/request-password-reset/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_request_password_reset_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/reset-password/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_reset_password_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/auth/verify-otp/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["auth_auth_verify_otp_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/entities/{id}/enable/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["entities_enable_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/biofuels": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_biofuels_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/certificates": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_certificates_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/countries": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_countries_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/depots": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_depots_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/entities": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_entities_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/feedstocks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_feedstocks_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/resources/production-sites": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["resources_production_sites_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/clients/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_clients_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/clients/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_clients_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/snapshot/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_snapshot_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/{id}/assign/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_ticket_sources_assign_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_ticket_sources_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/ticket-sources/group-assign/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_ticket_sources_group_assign_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_list"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/accept/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_accept_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/cancel/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_cancel_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/credit-source/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_credit_source_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/{id}/reject/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["saf_tickets_reject_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/export/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_export_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/tickets/filters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_tickets_filters_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/saf/years/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["saf_years_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["user_retrieve"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/request-access": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["user_request_access_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/revoke-access": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["user_revoke_access_create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ActivateAccount: {
      uidb64: string
      token: string
      invite?: string
    }
    Biofuel: {
      name: string
      name_en: string
      code: string
    }
    CarbureLotPublic: {
      readonly id: number
      year: number
      period: number
      carbure_id?: string
      readonly carbure_producer: components["schemas"]["EntitySummary"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      readonly production_country: components["schemas"]["Country"]
      /** Format: date */
      production_site_commissioning_date?: string | null
      production_site_certificate?: string | null
      production_site_double_counting_certificate?: string | null
      readonly carbure_supplier: components["schemas"]["EntitySummary"]
      unknown_supplier?: string | null
      supplier_certificate?: string | null
      supplier_certificate_type?: string | null
      transport_document_type?: components["schemas"]["TransportDocumentTypeEnum"]
      transport_document_reference?: string | null
      readonly carbure_client: components["schemas"]["EntitySummary"]
      unknown_client?: string | null
      /** Format: date */
      dispatch_date?: string | null
      readonly carbure_dispatch_site: components["schemas"]["Depot"]
      unknown_dispatch_site?: string | null
      readonly dispatch_site_country: components["schemas"]["Country"]
      /** Format: date */
      delivery_date?: string | null
      readonly carbure_delivery_site: components["schemas"]["Depot"]
      unknown_delivery_site?: string | null
      readonly delivery_site_country: components["schemas"]["Country"]
      delivery_type?: components["schemas"]["DeliveryTypeEnum"]
      lot_status?: components["schemas"]["LotStatusEnum"]
      correction_status?: components["schemas"]["CorrectionStatusEnum"]
      /** Format: double */
      volume?: number
      /** Format: double */
      weight?: number
      /** Format: double */
      lhv_amount?: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_total?: number
      /** Format: double */
      ghg_reference?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_reference_red_ii?: number
      /** Format: double */
      ghg_reduction_red_ii?: number
      free_field?: string | null
      readonly added_by: components["schemas"]["EntitySummary"]
      /** Format: date-time */
      readonly created_at: string | null
      readonly carbure_vendor: components["schemas"]["EntitySummary"]
      vendor_certificate?: string | null
      vendor_certificate_type?: string | null
      data_reliability_score?: string
    }
    /**
     * @description * `CONV` - Conventionnel
     *     * `ANN-IX-A` - ANNEXE IX-A
     *     * `ANN-IX-B` - ANNEXE IX-B
     *     * `TALLOL` - Tallol
     *     * `OTHER` - Autre
     * @enum {string}
     */
    CategoryEnum: CategoryEnum
    /**
     * @description * `SYSTEME_NATIONAL` - SYSTEME_NATIONAL
     *     * `ISCC` - ISCC
     *     * `REDCERT` - REDCERT
     *     * `2BS` - 2BS
     * @enum {string}
     */
    CertificateTypeEnum: CertificateTypeEnum
    Comment: {
      comment?: string
    }
    /**
     * @description * `NO_PROBLEMO` - NO_PROBLEMO
     *     * `IN_CORRECTION` - IN_CORRECTION
     *     * `FIXED` - FIXED
     * @enum {string}
     */
    CorrectionStatusEnum: CorrectionStatusEnum
    Country: {
      name: string
      name_en: string
      code_pays: string
      is_in_europe?: boolean
    }
    /**
     * @description * `UNKNOWN` - UNKNOWN
     *     * `RFC` - RFC
     *     * `STOCK` - STOCK
     *     * `BLENDING` - BLENDING
     *     * `EXPORT` - EXPORT
     *     * `TRADING` - TRADING
     *     * `PROCESSING` - PROCESSING
     *     * `DIRECT` - DIRECT
     *     * `FLUSHED` - FLUSHED
     *     * `CONSUMPTION` - CONSUMPTION
     * @enum {string}
     */
    DeliveryTypeEnum: DeliveryTypeEnum
    Depot: {
      readonly id: number
      name: string
      city?: string
      customs_id?: string
      readonly country: components["schemas"]["Country"]
      site_type?: components["schemas"]["SiteTypeEnum"]
      address?: string
      postal_code?: string
      gps_coordinates?: string | null
      accise?: string
      /**
       * Format: double
       * @description Entre 0 et 1
       */
      electrical_efficiency?: number | null
      /**
       * Format: double
       * @description Entre 0 et 1
       */
      thermal_efficiency?: number | null
      /**
       * Format: double
       * @description En degrés Celsius
       */
      useful_temperature?: number | null
    }
    EmptyResponse: {
      empty?: string
    }
    Entity: {
      readonly id: number
      name: string
      entity_type?: components["schemas"]["EntityTypeEnum"]
      has_mac?: boolean
      has_trading?: boolean
      has_direct_deliveries?: boolean
      has_stocks?: boolean
      preferred_unit?: components["schemas"]["PreferredUnitEnum"]
      legal_name?: string
      registration_id?: string
      sustainability_officer_phone_number?: string
      sustainability_officer?: string
      registered_address?: string
      registered_zipcode?: string
      registered_city?: string
      registered_country?: number | null
      activity_description?: string
      /** Format: uri */
      website?: string
      vat_number?: string
    }
    EntityPreview: {
      readonly id: number
      readonly name: string
      readonly entity_type: components["schemas"]["EntityTypeEnum"]
    }
    EntitySummary: {
      readonly id: number
      name: string
      entity_type?: components["schemas"]["EntityTypeEnum"]
    }
    /**
     * @description * `Producteur` - Producteur
     *     * `Opérateur` - Opérateur
     *     * `Administration` - Administration
     *     * `Trader` - Trader
     *     * `Auditor` - Auditeur
     *     * `Administration Externe` - Administration Externe
     *     * `Charge Point Operator` - Charge Point Operator
     *     * `Compagnie aérienne` - Compagnie aérienne
     *     * `Unknown` - Unknown
     *     * `Power or Heat Producer` - Producteur d'électricité ou de chaleur
     * @enum {string}
     */
    EntityTypeEnum: EntityTypeEnum
    ErrorResponse: {
      message: string
    }
    /**
     * @description * `DCA` - DCA
     *     * `AGRIMER` - AGRIMER
     *     * `TIRIB` - TIRIB
     *     * `AIRLINE` - AIRLINE
     *     * `ELEC` - ELEC
     * @enum {string}
     */
    ExtAdminPagesEnum: ExtAdminPagesEnum
    FeedStock: {
      name: string
      name_en: string
      code: string
      category?: components["schemas"]["CategoryEnum"]
      is_double_compte?: boolean
    }
    GenericCertificate: {
      certificate_id: string
      certificate_type: components["schemas"]["CertificateTypeEnum"]
      certificate_holder: string
      certificate_issuer?: string | null
      address?: string | null
      /** Format: date */
      valid_from: string
      /** Format: date */
      valid_until: string
      download_link?: string | null
      scope?: unknown
      input?: unknown
      output?: unknown
    }
    /**
     * @description * `Default` - Valeurs par défaut
     *     * `Actual` - Valeurs réelles
     *     * `NUTS2` - Valeurs NUTS2
     * @enum {string}
     */
    GesOptionEnum: GesOptionEnum
    GroupAssignmentResponse: {
      assigned_tickets_count: number
    }
    /**
     * @description * `DRAFT` - DRAFT
     *     * `PENDING` - PENDING
     *     * `ACCEPTED` - ACCEPTED
     *     * `REJECTED` - REJECTED
     *     * `FROZEN` - FROZEN
     *     * `DELETED` - DELETED
     * @enum {string}
     */
    LotStatusEnum: LotStatusEnum
    PaginatedEntityPreviewList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["EntityPreview"][]
    }
    PaginatedSafTicketList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["SafTicket"][]
    }
    PaginatedSafTicketSourceList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components["schemas"]["SafTicketSource"][]
    }
    /**
     * @description * `l` - litres
     *     * `kg` - kg
     *     * `MJ` - MJ
     * @enum {string}
     */
    PreferredUnitEnum: PreferredUnitEnum
    ProductionSite: {
      readonly id: number
      readonly producer: components["schemas"]["Entity"]
      name: string
      readonly country: components["schemas"]["Country"]
      /** Format: date */
      date_mise_en_service?: string | null
      ges_option?: components["schemas"]["GesOptionEnum"]
      eligible_dc?: boolean
      dc_reference?: string
      site_siret?: string
      address?: string
      city?: string
      postal_code?: string
      gps_coordinates?: string | null
      manager_name?: string
      manager_phone?: string
      manager_email?: string
    }
    RequestAccess: {
      comment?: string
      role: string
      entity_id: number
    }
    RequestPasswordReset: {
      username: string
    }
    ResetPassword: {
      uidb64: string
      token: string
      /** Mot de passe */
      password1: string
      /** Confirmation du mot de passe */
      password2: string
    }
    ResponseSuccess: {
      status: string
    }
    RevokeAccess: {
      entity_id: number
    }
    /**
     * @description * `RO` - Lecture Seule
     *     * `RW` - Lecture/Écriture
     *     * `ADMIN` - Administrateur
     *     * `AUDITOR` - Auditeur
     * @enum {string}
     */
    RoleEnum: RoleEnum
    SafTicket: {
      readonly id: number
      carbure_id?: string | null
      year: number
      assignment_period: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date */
      agreement_date?: string | null
      readonly supplier: string
      readonly client: string
      /** Format: double */
      volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      ghg_reduction?: number
    }
    SafTicketDetails: {
      readonly id: number
      carbure_id?: string | null
      year: number
      assignment_period: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date-time */
      readonly created_at: string | null
      readonly supplier: string
      readonly client: string
      free_field?: string | null
      /** Format: date */
      agreement_date?: string | null
      agreement_reference?: string | null
      /** Format: double */
      volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      readonly carbure_producer: components["schemas"]["EntityPreview"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      /** Format: date */
      production_site_commissioning_date?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_total?: number
      client_comment?: string | null
      readonly parent_ticket_source: components["schemas"]["SafTicketSourcePreview"]
    }
    SafTicketPreview: {
      readonly id: number
      carbure_id?: string | null
      readonly client: string
      /** Format: date */
      agreement_date?: string | null
      /** Format: double */
      volume: number
      status?: components["schemas"]["saf.filters.TicketFilter.status"]
      /** Format: date-time */
      readonly created_at: string | null
    }
    SafTicketSource: {
      readonly id: number
      carbure_id?: string | null
      year: number
      delivery_period: number
      /** Format: date-time */
      readonly created_at: string | null
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      /** Format: double */
      ghg_reduction?: number
      readonly assigned_tickets: components["schemas"]["SafTicketPreview"][]
      readonly parent_lot: components["schemas"]["SafTicketSourceParentLot"]
    }
    SafTicketSourceAssignment: {
      client_id: number
      /** Format: double */
      volume: number
      agreement_reference?: string
      agreement_date?: string
      free_field?: string | null
      assignment_period: number
    }
    SafTicketSourceDetails: {
      readonly id: number
      carbure_id?: string | null
      year: number
      delivery_period: number
      /** Format: date-time */
      readonly created_at: string | null
      readonly added_by: components["schemas"]["EntityPreview"]
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
      readonly feedstock: components["schemas"]["FeedStock"]
      readonly biofuel: components["schemas"]["Biofuel"]
      readonly country_of_origin: components["schemas"]["Country"]
      readonly assigned_tickets: components["schemas"]["SafTicketPreview"][]
      readonly carbure_producer: components["schemas"]["EntityPreview"]
      unknown_producer?: string | null
      readonly carbure_production_site: components["schemas"]["ProductionSite"]
      unknown_production_site?: string | null
      /** Format: date */
      production_site_commissioning_date?: string | null
      /** Format: double */
      eec?: number
      /** Format: double */
      el?: number
      /** Format: double */
      ep?: number
      /** Format: double */
      etd?: number
      /** Format: double */
      eu?: number
      /** Format: double */
      esca?: number
      /** Format: double */
      eccs?: number
      /** Format: double */
      eccr?: number
      /** Format: double */
      eee?: number
      /** Format: double */
      ghg_reduction?: number
      /** Format: double */
      ghg_total?: number
      parent_lot: components["schemas"]["CarbureLotPublic"]
    }
    SafTicketSourceGroupAssignment: {
      client_id: number
      /** Format: double */
      volume: number
      agreement_reference?: string
      agreement_date?: string
      free_field?: string | null
      assignment_period: number
      ticket_sources_ids: number[]
    }
    SafTicketSourceParentLot: {
      readonly id: number
      carbure_id?: string
    }
    SafTicketSourcePreview: {
      readonly id: number
      carbure_id?: string | null
      /** Format: double */
      total_volume: number
      /** Format: double */
      assigned_volume: number
    }
    /**
     * @description * `OTHER` - Autre
     *     * `EFS` - EFS
     *     * `EFPE` - EFPE
     *     * `OIL DEPOT` - OIL DEPOT
     *     * `BIOFUEL DEPOT` - BIOFUEL DEPOT
     *     * `HEAT PLANT` - HEAT PLANT
     *     * `POWER PLANT` - POWER PLANT
     *     * `COGENERATION PLANT` - COGENERATION PLANT
     *     * `PRODUCTION BIOLIQUID` - PRODUCTION BIOLIQUID
     *     * `EFCA` - EFCA
     * @enum {string}
     */
    SiteTypeEnum: SiteTypeEnum
    /**
     * @description * `DAU` - DAU
     *     * `DAE` - DAE
     *     * `DSA` - DSA
     *     * `DSAC` - DSAC
     *     * `DSP` - DSP
     *     * `OTHER` - OTHER
     * @enum {string}
     */
    TransportDocumentTypeEnum: TransportDocumentTypeEnum
    /** @description Serializer for creating new users. Includes required fields
     *     and repeated password validation. */
    UserCreation: {
      /**
       * Adresse électronique
       * Format: email
       */
      email: string
      /** Nom */
      name: string
      /** Mot de passe */
      password1: string
      /** Confirmation du mot de passe */
      password2: string
    }
    UserEntity: {
      readonly id: number
      readonly name: string
      readonly is_enabled: boolean
      readonly entity_type: components["schemas"]["EntityTypeEnum"]
      readonly has_mac: boolean
      readonly has_trading: boolean
      readonly has_direct_deliveries: boolean
      readonly has_stocks: boolean
      readonly legal_name: string
      readonly registration_id: string
      readonly sustainability_officer: string
      readonly sustainability_officer_phone_number: string
      readonly sustainability_officer_email: string
      readonly registered_address: string
      readonly registered_zipcode: string
      readonly registered_city: string
      registered_country?: components["schemas"]["Country"]
      readonly default_certificate: string | null
      readonly preferred_unit: components["schemas"]["PreferredUnitEnum"]
      readonly has_saf: boolean
      readonly has_elec: boolean
      readonly activity_description: string
      /** Format: uri */
      readonly website: string
      readonly vat_number: string
      readonly ext_admin_pages: components["schemas"]["ExtAdminPagesEnum"][]
    }
    UserLogin: {
      username: string
      password: string
    }
    /** @description A serializer for re-sending the user activation email. Includes email field only. */
    UserResendActivationLink: {
      /**
       * Courriel
       * Format: email
       */
      email: string
    }
    UserRights: {
      readonly name: string
      /** Format: email */
      readonly email: string
      entity: components["schemas"]["UserEntity"]
      readonly role: components["schemas"]["RoleEnum"]
      /** Format: date-time */
      expiration_date?: string | null
    }
    UserRightsRequests: {
      readonly id: number
      readonly user: string[]
      entity: components["schemas"]["UserEntity"]
      /** Format: date-time */
      readonly date_requested: string
      readonly status: components["schemas"]["UserRightsRequestsStatusEnum"]
      comment?: string | null
      readonly role: components["schemas"]["RoleEnum"]
      /** Format: date-time */
      expiration_date?: string | null
    }
    /**
     * @description * `PENDING` - En attente de validation
     *     * `ACCEPTED` - Accepté
     *     * `REJECTED` - Refusé
     *     * `REVOKED` - Révoqué
     * @enum {string}
     */
    UserRightsRequestsStatusEnum: UserRightsRequestsStatusEnum
    UserSettingsResponseSeriaizer: {
      /** Format: email */
      email: string
      rights: components["schemas"]["UserRights"][]
      requests: components["schemas"]["UserRightsRequests"][]
    }
    /** @description A serializer for submitting the OTP sent via email. Includes otp_token field only. */
    VerifyOTP: {
      /** Entrez le code à 6 chiffres reçu par email */
      otp_token: string
    }
    /**
     * @description * `PENDING` - En attente
     *     * `ACCEPTED` - Accepté
     *     * `REJECTED` - Refusé
     * @enum {string}
     */
    "saf.filters.TicketFilter.status": PathsApiSafTicketsGetParametersQueryStatus
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  auth_auth_activate_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivateAccount"]
        "application/x-www-form-urlencoded": components["schemas"]["ActivateAccount"]
        "multipart/form-data": components["schemas"]["ActivateAccount"]
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Bad request - missing fields. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  auth_auth_login_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLogin"]
        "application/x-www-form-urlencoded": components["schemas"]["UserLogin"]
        "multipart/form-data": components["schemas"]["UserLogin"]
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Bad request - missing fields. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
    }
  }
  auth_auth_logout_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_register_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreation"]
        "application/x-www-form-urlencoded": components["schemas"]["UserCreation"]
        "multipart/form-data": components["schemas"]["UserCreation"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_request_activation_link_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserResendActivationLink"]
        "application/x-www-form-urlencoded": components["schemas"]["UserResendActivationLink"]
        "multipart/form-data": components["schemas"]["UserResendActivationLink"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_request_otp_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_request_password_reset_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestPasswordReset"]
        "application/x-www-form-urlencoded": components["schemas"]["RequestPasswordReset"]
        "multipart/form-data": components["schemas"]["RequestPasswordReset"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_reset_password_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPassword"]
        "application/x-www-form-urlencoded": components["schemas"]["ResetPassword"]
        "multipart/form-data": components["schemas"]["ResetPassword"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  auth_auth_verify_otp_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyOTP"]
        "application/x-www-form-urlencoded": components["schemas"]["VerifyOTP"]
        "multipart/form-data": components["schemas"]["VerifyOTP"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCreation"]
        }
      }
    }
  }
  entities_enable_create: {
    parameters: {
      query: {
        /** @description The id of the admin entity enabling the company */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Entity. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyResponse"]
        "application/x-www-form-urlencoded": components["schemas"]["EmptyResponse"]
        "multipart/form-data": components["schemas"]["EmptyResponse"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EmptyResponse"]
        }
      }
    }
  }
  resources_biofuels_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `name`, `name_en`, and `code` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Biofuel"][]
        }
      }
    }
  }
  resources_certificates_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `certificate_id` and `certificate_holder` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["GenericCertificate"][]
        }
      }
    }
  }
  resources_countries_list: {
    parameters: {
      query?: {
        /** @description Search within the fields `name`, `name_en` and `code_pays` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Country"][]
        }
      }
    }
  }
  resources_depots_list: {
    parameters: {
      query?: {
        /** @description Public Only */
        public_only?: boolean
        /** @description Search within the fields `name`, `name_en` and `code_pays` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Depot"][]
        }
      }
    }
  }
  resources_entities_list: {
    parameters: {
      query?: {
        /** @description Only keep specific entity types */
        entity_type?: string[]
        /** @description Only show enabled entities */
        is_enabled?: boolean
        /** @description Search within the field `name` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EntityPreview"][]
        }
      }
    }
  }
  resources_feedstocks_list: {
    parameters: {
      query?: {
        /** @description Double compte only */
        double_count_only?: boolean
        /** @description Search within the fields `name`, `name_en` and `code` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["FeedStock"][]
        }
      }
    }
  }
  resources_production_sites_list: {
    parameters: {
      query?: {
        /** @description Search within the field `producer_id` */
        producer_id?: number
        /** @description Search within the field `name` */
        query?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ProductionSite"][]
        }
      }
    }
  }
  saf_clients_list: {
    parameters: {
      query?: {
        entity_id?: string
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedEntityPreviewList"]
        }
      }
    }
  }
  saf_clients_retrieve: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A unique integer value identifying this Entity. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["EntityPreview"]
        }
      }
    }
  }
  saf_snapshot_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
        /** @description Year */
        year: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json":
            | {
                tickets_pending: number
                tickets_accepted: number
              }
            | {
                ticket_sources_available: number
                ticket_sources_history: number
                tickets_assigned: number
                tickets_assigned_pending: number
                tickets_assigned_accepted: number
                tickets_assigned_rejected: number
                tickets_received: number
                tickets_received_pending: number
                tickets_received_accepted: number
              }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_ticket_sources_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedSafTicketSourceList"]
        }
      }
    }
  }
  saf_ticket_sources_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketSourceDetails"]
        }
      }
    }
  }
  saf_ticket_sources_assign_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Tickets source SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceAssignment"]
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceAssignment"]
        "multipart/form-data": components["schemas"]["SafTicketSourceAssignment"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketSourceAssignment"]
        }
      }
    }
  }
  saf_ticket_sources_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  saf_ticket_sources_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        delivery_sites?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Filter string to apply */
        filter?: string
        /** @description Ordre
         *
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant) */
        order?: PathsApiSafTicketSourcesGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `HISTORY` - HISTORY
         *     * `AVAILABLE` - AVAILABLE */
        status?: PathsApiSafTicketSourcesGetParametersQueryStatus
        /** @description Comma-separated list of supplier names */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
    }
  }
  saf_ticket_sources_group_assign_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SafTicketSourceGroupAssignment"]
        "application/x-www-form-urlencoded": components["schemas"]["SafTicketSourceGroupAssignment"]
        "multipart/form-data": components["schemas"]["SafTicketSourceGroupAssignment"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["GroupAssignmentResponse"]
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_list: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedSafTicketList"]
        }
      }
    }
  }
  saf_tickets_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicketDetails"]
        }
      }
    }
  }
  saf_tickets_accept_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"]
        "application/x-www-form-urlencoded": components["schemas"]["Comment"]
        "multipart/form-data": components["schemas"]["Comment"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_cancel_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"]
        "application/x-www-form-urlencoded": components["schemas"]["Comment"]
        "multipart/form-data": components["schemas"]["Comment"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_credit_source_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SafTicket"]
        }
      }
    }
  }
  saf_tickets_reject_create: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path: {
        /** @description A unique integer value identifying this Ticket SAF. */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Comment"]
        "application/x-www-form-urlencoded": components["schemas"]["Comment"]
        "multipart/form-data": components["schemas"]["Comment"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  saf_tickets_export_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/vnd.ms-excel": string
        }
      }
    }
  }
  saf_tickets_filters_retrieve: {
    parameters: {
      query: {
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        clients?: string[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        countries_of_origin?: string[]
        entity_id: number
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        feedstocks?: string[]
        /** @description Filter string to apply */
        filter?: string
        /** @description Ordre
         *
         *     * `client` - Client
         *     * `-client` - Client (décroissant)
         *     * `volume` - Volume
         *     * `-volume` - Volume (décroissant)
         *     * `period` - Period
         *     * `-period` - Period (décroissant)
         *     * `feedstock` - Feedstock
         *     * `-feedstock` - Feedstock (décroissant)
         *     * `ghg_reduction` - Ghg reduction
         *     * `-ghg_reduction` - Ghg reduction (décroissant)
         *     * `created_at` - Created at
         *     * `-created_at` - Created at (décroissant)
         *     * `suppliers` - Suppliers
         *     * `-suppliers` - Suppliers (décroissant) */
        order?: PathsApiSafTicketsGetParametersQueryOrder[]
        /** @description Which field to use when ordering the results. */
        ordering?: string
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        periods?: number[]
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        production_sites?: string[]
        /** @description A search term. */
        search?: string
        /** @description * `PENDING` - En attente
         *     * `ACCEPTED` - Accepté
         *     * `REJECTED` - Refusé */
        status?: PathsApiSafTicketsGetParametersQueryStatus
        /** @description Les valeurs multiples doivent être séparées par des virgules. */
        suppliers?: string[]
        year?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
    }
  }
  saf_years_retrieve: {
    parameters: {
      query: {
        /** @description Entity ID */
        entity_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": number[]
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ErrorResponse"]
        }
      }
    }
  }
  user_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserSettingsResponseSeriaizer"]
        }
      }
    }
  }
  user_request_access_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestAccess"]
        "application/x-www-form-urlencoded": components["schemas"]["RequestAccess"]
        "multipart/form-data": components["schemas"]["RequestAccess"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ResponseSuccess"]
        }
      }
    }
  }
  user_revoke_access_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RevokeAccess"]
        "application/x-www-form-urlencoded": components["schemas"]["RevokeAccess"]
        "multipart/form-data": components["schemas"]["RevokeAccess"]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ResponseSuccess"]
        }
      }
    }
  }
}
export enum PathsApiSafTicketSourcesGetParametersQueryOrder {
  ValueMinusfeedstock = "-feedstock",
  ValueMinusghg_reduction = "-ghg_reduction",
  ValueMinusperiod = "-period",
  ValueMinusvolume = "-volume",
  feedstock = "feedstock",
  ghg_reduction = "ghg_reduction",
  period = "period",
  volume = "volume",
}
export enum PathsApiSafTicketSourcesGetParametersQueryStatus {
  AVAILABLE = "AVAILABLE",
  HISTORY = "HISTORY",
}
export enum PathsApiSafTicketsGetParametersQueryOrder {
  ValueMinusclient = "-client",
  ValueMinuscreated_at = "-created_at",
  ValueMinusfeedstock = "-feedstock",
  ValueMinusghg_reduction = "-ghg_reduction",
  ValueMinusperiod = "-period",
  ValueMinussuppliers = "-suppliers",
  ValueMinusvolume = "-volume",
  client = "client",
  created_at = "created_at",
  feedstock = "feedstock",
  ghg_reduction = "ghg_reduction",
  period = "period",
  suppliers = "suppliers",
  volume = "volume",
}
export enum PathsApiSafTicketsGetParametersQueryStatus {
  ACCEPTED = "ACCEPTED",
  PENDING = "PENDING",
  REJECTED = "REJECTED",
}
export enum CategoryEnum {
  CONV = "CONV",
  ANN_IX_A = "ANN-IX-A",
  ANN_IX_B = "ANN-IX-B",
  TALLOL = "TALLOL",
  OTHER = "OTHER",
}
export enum CertificateTypeEnum {
  SYSTEME_NATIONAL = "SYSTEME_NATIONAL",
  ISCC = "ISCC",
  REDCERT = "REDCERT",
  Value2BS = "2BS",
}
export enum CorrectionStatusEnum {
  NO_PROBLEMO = "NO_PROBLEMO",
  IN_CORRECTION = "IN_CORRECTION",
  FIXED = "FIXED",
}
export enum DeliveryTypeEnum {
  UNKNOWN = "UNKNOWN",
  RFC = "RFC",
  STOCK = "STOCK",
  BLENDING = "BLENDING",
  EXPORT = "EXPORT",
  TRADING = "TRADING",
  PROCESSING = "PROCESSING",
  DIRECT = "DIRECT",
  FLUSHED = "FLUSHED",
  CONSUMPTION = "CONSUMPTION",
}
export enum EntityTypeEnum {
  Producer = "Producteur",
  Operator = "Op\u00E9rateur",
  Administration = "Administration",
  Trader = "Trader",
  Auditor = "Auditor",
  ExternalAdmin = "Administration Externe",
  CPO = "Charge Point Operator",
  Airline = "Compagnie a\u00E9rienne",
  Unknown = "Unknown",
  PowerOrHeatProducer = "Power or Heat Producer",
}
export enum ExtAdminPagesEnum {
  DCA = "DCA",
  AGRIMER = "AGRIMER",
  TIRIB = "TIRIB",
  AIRLINE = "AIRLINE",
  ELEC = "ELEC",
}
export enum GesOptionEnum {
  Default = "Default",
  Actual = "Actual",
  NUTS2 = "NUTS2",
}
export enum LotStatusEnum {
  DRAFT = "DRAFT",
  PENDING = "PENDING",
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  FROZEN = "FROZEN",
  DELETED = "DELETED",
}
export enum PreferredUnitEnum {
  l = "l",
  kg = "kg",
  MJ = "MJ",
}
export enum RoleEnum {
  ReadOnly = "RO",
  ReadWrite = "RW",
  Admin = "ADMIN",
  Auditor = "AUDITOR",
}
export enum SiteTypeEnum {
  OTHER = "OTHER",
  EFS = "EFS",
  EFPE = "EFPE",
  OIL_DEPOT = "OIL DEPOT",
  BIOFUEL_DEPOT = "BIOFUEL DEPOT",
  HEAT_PLANT = "HEAT PLANT",
  POWER_PLANT = "POWER PLANT",
  COGENERATION_PLANT = "COGENERATION PLANT",
  PRODUCTION_BIOLIQUID = "PRODUCTION BIOLIQUID",
  EFCA = "EFCA",
}
export enum TransportDocumentTypeEnum {
  DAU = "DAU",
  DAE = "DAE",
  DSA = "DSA",
  DSAC = "DSAC",
  DSP = "DSP",
  OTHER = "OTHER",
}
export enum UserRightsRequestsStatusEnum {
  Pending = "PENDING",
  Accepted = "ACCEPTED",
  Rejected = "REJECTED",
  Revoked = "REVOKED",
}
